
RGB_sens.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000f1c  00000fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010c  0080010c  00000fbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001053  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fd  00000000  00000000  0000215f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000982  00000000  00000000  00002b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  000034e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b8  00000000  00000000  00003724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b85  00000000  00000000  00003cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004861  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  9e:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2cStart>:
#include "i2clib.h"


void i2cStart(void){
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  a6:	84 ea       	ldi	r24, 0xA4	; 164
  a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));
  ac:	ec eb       	ldi	r30, 0xBC	; 188
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	88 23       	and	r24, r24
  b4:	ec f7       	brge	.-6      	; 0xb0 <i2cStart+0xa>

}
  b6:	08 95       	ret

000000b8 <i2cWrite>:

void i2cWrite(uint8_t data){
	
	TWDR = data;
  b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT)|(1<<TWEN);
  bc:	84 e8       	ldi	r24, 0x84	; 132
  be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));
  c2:	ec eb       	ldi	r30, 0xBC	; 188
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	ec f7       	brge	.-6      	; 0xc6 <i2cWrite+0xe>
	
}
  cc:	08 95       	ret

000000ce <i2cRead>:

uint8_t i2cRead(void){

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  ce:	84 ec       	ldi	r24, 0xC4	; 196
  d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));
  d4:	ec eb       	ldi	r30, 0xBC	; 188
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 23       	and	r24, r24
  dc:	ec f7       	brge	.-6      	; 0xd8 <i2cRead+0xa>
	return TWDR;
  de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	
}
  e2:	08 95       	ret

000000e4 <i2cStop>:

void i2cStop(void){
	
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
  e4:	84 e9       	ldi	r24, 0x94	; 148
  e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  ea:	08 95       	ret

000000ec <getSingleMeasurement>:
uint16_t ind=0;//index of sample array's element
uint8_t colour_code=0;
uint8_t flag=0;


uint8_t getSingleMeasurement(uint16_t* rgb_array_pointer,float* hsv_array_pointer){
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	ec 01       	movw	r28, r24
  f6:	8b 01       	movw	r16, r22
		
	rgb_array_pointer[0]=readColour(RDATAL_ADDR,RDATAH_ADDR);//red
  f8:	67 e1       	ldi	r22, 0x17	; 23
  fa:	86 e1       	ldi	r24, 0x16	; 22
  fc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <readColour>
 100:	99 83       	std	Y+1, r25	; 0x01
 102:	88 83       	st	Y, r24
	rgb_array_pointer[1]=readColour(GDATAL_ADDR,GDATAH_ADDR);//green
 104:	69 e1       	ldi	r22, 0x19	; 25
 106:	88 e1       	ldi	r24, 0x18	; 24
 108:	0e 94 73 01 	call	0x2e6	; 0x2e6 <readColour>
 10c:	9b 83       	std	Y+3, r25	; 0x03
 10e:	8a 83       	std	Y+2, r24	; 0x02
	rgb_array_pointer[2]=readColour(BDATAL_ADDR,BDATAH_ADDR);//blue
 110:	6b e1       	ldi	r22, 0x1B	; 27
 112:	8a e1       	ldi	r24, 0x1A	; 26
 114:	0e 94 73 01 	call	0x2e6	; 0x2e6 <readColour>
 118:	9d 83       	std	Y+5, r25	; 0x05
 11a:	8c 83       	std	Y+4, r24	; 0x04
	if (rgb2hsv(rgb_array_pointer,hsv_array_pointer)) {
 11c:	b8 01       	movw	r22, r16
 11e:	ce 01       	movw	r24, r28
 120:	0e 94 ba 01 	call	0x374	; 0x374 <rgb2hsv>
 124:	88 23       	and	r24, r24
 126:	51 f0       	breq	.+20     	; 0x13c <getSingleMeasurement+0x50>
		colour_code=getColourCode(hsv_array_pointer[0]);
 128:	f8 01       	movw	r30, r16
 12a:	60 81       	ld	r22, Z
 12c:	71 81       	ldd	r23, Z+1	; 0x01
 12e:	82 81       	ldd	r24, Z+2	; 0x02
 130:	93 81       	ldd	r25, Z+3	; 0x03
 132:	0e 94 bd 04 	call	0x97a	; 0x97a <getColourCode>
 136:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <colour_code>
		return(1);//colour is defined
 13a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return(0); //colour is not defined
	
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	08 95       	ret

00000146 <getSampleArray>:

void getSampleArray(uint8_t is_colour_defined,uint8_t* output_sample_array){
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
PORTC=1;
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	98 b9       	out	0x08, r25	; 8
	if(is_colour_defined){
 152:	88 23       	and	r24, r24
 154:	01 f1       	breq	.+64     	; 0x196 <getSampleArray+0x50>
		
		flag=1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		output_sample_array[ind]=colour_code;
 15c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <colour_code>
 160:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <ind>
 164:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <ind+0x1>
 168:	c6 0f       	add	r28, r22
 16a:	d7 1f       	adc	r29, r23
 16c:	88 83       	st	Y, r24
		ind+=1;
 16e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ind>
 172:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <ind+0x1>
 176:	01 96       	adiw	r24, 0x01	; 1
		if(ind>199) ind=199;
 178:	88 3c       	cpi	r24, 0xC8	; 200
 17a:	91 05       	cpc	r25, r1
 17c:	28 f4       	brcc	.+10     	; 0x188 <getSampleArray+0x42>
PORTC=1;
	if(is_colour_defined){
		
		flag=1;
		output_sample_array[ind]=colour_code;
		ind+=1;
 17e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <ind+0x1>
 182:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ind>
 186:	2d c0       	rjmp	.+90     	; 0x1e2 <getSampleArray+0x9c>
		if(ind>199) ind=199;
 188:	87 ec       	ldi	r24, 0xC7	; 199
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <ind+0x1>
 190:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ind>
 194:	26 c0       	rjmp	.+76     	; 0x1e2 <getSampleArray+0x9c>
	}
	else {
		PORTC=0;
 196:	18 b8       	out	0x08, r1	; 8
		if(flag==1){
 198:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	09 f5       	brne	.+66     	; 0x1e2 <getSampleArray+0x9c>
 1a0:	eb 01       	movw	r28, r22

			usartTransmitTwoBytes(ind); //transmit number of elements
 1a2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ind>
 1a6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <ind+0x1>
 1aa:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <usartTransmitTwoBytes>
			for(uint16_t i=0;i<ind;i++){	
 1ae:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ind>
 1b2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <ind+0x1>
 1b6:	89 2b       	or	r24, r25
 1b8:	71 f0       	breq	.+28     	; 0x1d6 <getSampleArray+0x90>
 1ba:	00 e0       	ldi	r16, 0x00	; 0
 1bc:	10 e0       	ldi	r17, 0x00	; 0
				usartTransmit(output_sample_array[i]);
 1be:	89 91       	ld	r24, Y+
 1c0:	0e 94 72 05 	call	0xae4	; 0xae4 <usartTransmit>
	else {
		PORTC=0;
		if(flag==1){

			usartTransmitTwoBytes(ind); //transmit number of elements
			for(uint16_t i=0;i<ind;i++){	
 1c4:	0f 5f       	subi	r16, 0xFF	; 255
 1c6:	1f 4f       	sbci	r17, 0xFF	; 255
 1c8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ind>
 1cc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <ind+0x1>
 1d0:	08 17       	cp	r16, r24
 1d2:	19 07       	cpc	r17, r25
 1d4:	a0 f3       	brcs	.-24     	; 0x1be <getSampleArray+0x78>
				usartTransmit(output_sample_array[i]);
			}
			ind=0;
 1d6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ind+0x1>
 1da:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ind>
			flag=0;
 1de:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		}
	}
	
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

000001ec <main>:

int main(void)
{
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	ca 5d       	subi	r28, 0xDA	; 218
 1f6:	d1 09       	sbc	r29, r1
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t rgb_array[3]={0,0,0};
 202:	1a 82       	std	Y+2, r1	; 0x02
 204:	19 82       	std	Y+1, r1	; 0x01
 206:	1c 82       	std	Y+4, r1	; 0x04
 208:	1b 82       	std	Y+3, r1	; 0x03
 20a:	1e 82       	std	Y+6, r1	; 0x06
 20c:	1d 82       	std	Y+5, r1	; 0x05
	float hsv_array[3]={0,0,0};
 20e:	1f 82       	std	Y+7, r1	; 0x07
 210:	18 86       	std	Y+8, r1	; 0x08
 212:	19 86       	std	Y+9, r1	; 0x09
 214:	1a 86       	std	Y+10, r1	; 0x0a
 216:	1b 86       	std	Y+11, r1	; 0x0b
 218:	1c 86       	std	Y+12, r1	; 0x0c
 21a:	1d 86       	std	Y+13, r1	; 0x0d
 21c:	1e 86       	std	Y+14, r1	; 0x0e
 21e:	1f 86       	std	Y+15, r1	; 0x0f
 220:	18 8a       	std	Y+16, r1	; 0x10
 222:	19 8a       	std	Y+17, r1	; 0x11
 224:	1a 8a       	std	Y+18, r1	; 0x12
	uint8_t sample_array[200]={0};//array for sample measurement
 226:	fe 01       	movw	r30, r28
 228:	73 96       	adiw	r30, 0x13	; 19
 22a:	88 ec       	ldi	r24, 0xC8	; 200
 22c:	df 01       	movw	r26, r30
 22e:	1d 92       	st	X+, r1
 230:	8a 95       	dec	r24
 232:	e9 f7       	brne	.-6      	; 0x22e <main+0x42>
	float *pointer_hsv=hsv_array;
	uint16_t *pointer_rgb=rgb_array;
	uint8_t *pointer_sample_array=sample_array;
	DDRC=0x07;
 234:	87 e0       	ldi	r24, 0x07	; 7
 236:	87 b9       	out	0x07, r24	; 7
	TWBR|=(1<<TWBR5);// TWBR=32 (for 100 kHz i2c frequency)
 238:	e8 eb       	ldi	r30, 0xB8	; 184
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	80 62       	ori	r24, 0x20	; 32
 240:	80 83       	st	Z, r24
	usartInit(UBRR_VALUE);
 242:	89 e1       	ldi	r24, 0x19	; 25
 244:	0e 94 67 05 	call	0xace	; 0xace <usartInit>
	sensorInit(pointer_init);
 248:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 24c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 250:	0e 94 39 01 	call	0x272	; 0x272 <sensorInit>
	flag=0;
 254:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
	while (1){
		

		uint8_t is_colour_defined=getSingleMeasurement(pointer_rgb,pointer_hsv);
 258:	be 01       	movw	r22, r28
 25a:	69 5f       	subi	r22, 0xF9	; 249
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	ce 01       	movw	r24, r28
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	0e 94 76 00 	call	0xec	; 0xec <getSingleMeasurement>
		getSampleArray(is_colour_defined,pointer_sample_array);
 266:	be 01       	movw	r22, r28
 268:	6d 5e       	subi	r22, 0xED	; 237
 26a:	7f 4f       	sbci	r23, 0xFF	; 255
 26c:	0e 94 a3 00 	call	0x146	; 0x146 <getSampleArray>
 270:	f3 cf       	rjmp	.-26     	; 0x258 <main+0x6c>

00000272 <sensorInit>:
#include "sensorlib.h"

void sensorInit(uint8_t *init_array){
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29

	for (int i=0;i<*(init_array+0);i++){
 27e:	fc 01       	movw	r30, r24
 280:	20 81       	ld	r18, Z
 282:	22 23       	and	r18, r18
 284:	49 f1       	breq	.+82     	; 0x2d8 <sensorInit+0x66>
 286:	7c 01       	movw	r14, r24
 288:	8c 01       	movw	r16, r24
 28a:	0e 5f       	subi	r16, 0xFE	; 254
 28c:	1f 4f       	sbci	r17, 0xFF	; 255
 28e:	c0 e0       	ldi	r28, 0x00	; 0
 290:	d0 e0       	ldi	r29, 0x00	; 0
		
		i2cStart();
 292:	0e 94 53 00 	call	0xa6	; 0xa6 <i2cStart>
		i2cWrite(*(init_array+1)<<1);// 7 bit RGB sensor's address + W (0)
 296:	f7 01       	movw	r30, r14
 298:	81 81       	ldd	r24, Z+1	; 0x01
 29a:	88 0f       	add	r24, r24
 29c:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWrite>
		i2cWrite((1<<7)|(*(init_array+2+i)));//select register
 2a0:	f8 01       	movw	r30, r16
 2a2:	81 91       	ld	r24, Z+
 2a4:	8f 01       	movw	r16, r30
 2a6:	80 68       	ori	r24, 0x80	; 128
 2a8:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWrite>
		i2cWrite(*(init_array+6+i));//write init value
 2ac:	f8 01       	movw	r30, r16
 2ae:	83 81       	ldd	r24, Z+3	; 0x03
 2b0:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWrite>
		if(i==2) _delay_ms(3);
 2b4:	c2 30       	cpi	r28, 0x02	; 2
 2b6:	d1 05       	cpc	r29, r1
 2b8:	31 f4       	brne	.+12     	; 0x2c6 <sensorInit+0x54>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	8f e6       	ldi	r24, 0x6F	; 111
 2bc:	97 e1       	ldi	r25, 0x17	; 23
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <sensorInit+0x4c>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <sensorInit+0x52>
 2c4:	00 00       	nop
		i2cStop();
 2c6:	0e 94 72 00 	call	0xe4	; 0xe4 <i2cStop>
#include "sensorlib.h"

void sensorInit(uint8_t *init_array){

	for (int i=0;i<*(init_array+0);i++){
 2ca:	21 96       	adiw	r28, 0x01	; 1
 2cc:	f7 01       	movw	r30, r14
 2ce:	20 81       	ld	r18, Z
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	c2 17       	cp	r28, r18
 2d4:	d3 07       	cpc	r29, r19
 2d6:	ec f2       	brlt	.-70     	; 0x292 <sensorInit+0x20>
		i2cWrite((1<<7)|(*(init_array+2+i)));//select register
		i2cWrite(*(init_array+6+i));//write init value
		if(i==2) _delay_ms(3);
		i2cStop();
	}
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	08 95       	ret

000002e6 <readColour>:

uint16_t readColour(uint8_t low_addr, uint8_t high_addr){
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	c8 2f       	mov	r28, r24
 2ec:	d6 2f       	mov	r29, r22
	
	i2cStart();
 2ee:	0e 94 53 00 	call	0xa6	; 0xa6 <i2cStart>
	i2cWrite(SENS_ADDR<<1);// 7 bit RGB sensor's address + W (0)
 2f2:	82 e5       	ldi	r24, 0x52	; 82
 2f4:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWrite>
	i2cWrite((1<<7)|low_addr);// DATAL byte
 2f8:	8c 2f       	mov	r24, r28
 2fa:	80 68       	ori	r24, 0x80	; 128
 2fc:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWrite>
	i2cStop();
 300:	0e 94 72 00 	call	0xe4	; 0xe4 <i2cStop>
	
	i2cStart();
 304:	0e 94 53 00 	call	0xa6	; 0xa6 <i2cStart>
	i2cWrite((SENS_ADDR<<1)|(1<<0));// 7 bit RGB sensor's address + R (1)
 308:	83 e5       	ldi	r24, 0x53	; 83
 30a:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWrite>
	unsigned int low_data_value=i2cRead();
 30e:	0e 94 67 00 	call	0xce	; 0xce <i2cRead>
 312:	c8 2f       	mov	r28, r24
	i2cStop();
 314:	0e 94 72 00 	call	0xe4	; 0xe4 <i2cStop>
	
	i2cStart();
 318:	0e 94 53 00 	call	0xa6	; 0xa6 <i2cStart>
	i2cWrite(SENS_ADDR<<1);// 7 bit RGB sensor's address + W (0)
 31c:	82 e5       	ldi	r24, 0x52	; 82
 31e:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWrite>
	i2cWrite((1<<7)|high_addr);// DATAH byte
 322:	8d 2f       	mov	r24, r29
 324:	80 68       	ori	r24, 0x80	; 128
 326:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWrite>
	i2cStop();
 32a:	0e 94 72 00 	call	0xe4	; 0xe4 <i2cStop>
	
	i2cStart();
 32e:	0e 94 53 00 	call	0xa6	; 0xa6 <i2cStart>
	i2cWrite((SENS_ADDR<<1)|(1<<0));// 7 bit RGB sensor's address + R (1)
 332:	83 e5       	ldi	r24, 0x53	; 83
 334:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWrite>
	unsigned int high_data_value=i2cRead();
 338:	0e 94 67 00 	call	0xce	; 0xce <i2cRead>
 33c:	d8 2f       	mov	r29, r24
	i2cStop();
 33e:	0e 94 72 00 	call	0xe4	; 0xe4 <i2cStop>
	
	// PON Enable (AEN is enabled after every ADC cycle)
	
	i2cStart();
 342:	0e 94 53 00 	call	0xa6	; 0xa6 <i2cStart>
	i2cWrite(SENS_ADDR<<1);// 7 bit RGB sensor's address + W (0)
 346:	82 e5       	ldi	r24, 0x52	; 82
 348:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWrite>
	i2cWrite((1<<7)|0x00);
 34c:	80 e8       	ldi	r24, 0x80	; 128
 34e:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWrite>
	i2cWrite(0x01);
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWrite>
	i2cStop();
 358:	0e 94 72 00 	call	0xe4	; 0xe4 <i2cStop>
 35c:	8f e6       	ldi	r24, 0x6F	; 111
 35e:	97 e1       	ldi	r25, 0x17	; 23
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <readColour+0x7a>
 364:	00 c0       	rjmp	.+0      	; 0x366 <readColour+0x80>
 366:	00 00       	nop
	
	_delay_ms(3);
	
	return((high_data_value<<8)|low_data_value);
 368:	8c 2f       	mov	r24, r28
 36a:	90 e0       	ldi	r25, 0x00	; 0
	
}
 36c:	9d 2b       	or	r25, r29
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <rgb2hsv>:

uint8_t rgb2hsv(uint16_t* in_rgb_array, float* out_hsv_array){
 374:	2f 92       	push	r2
 376:	3f 92       	push	r3
 378:	4f 92       	push	r4
 37a:	5f 92       	push	r5
 37c:	6f 92       	push	r6
 37e:	7f 92       	push	r7
 380:	8f 92       	push	r8
 382:	9f 92       	push	r9
 384:	af 92       	push	r10
 386:	bf 92       	push	r11
 388:	cf 92       	push	r12
 38a:	df 92       	push	r13
 38c:	ef 92       	push	r14
 38e:	ff 92       	push	r15
 390:	0f 93       	push	r16
 392:	1f 93       	push	r17
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
 39c:	2a 97       	sbiw	r28, 0x0a	; 10
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	f8 94       	cli
 3a2:	de bf       	out	0x3e, r29	; 62
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	cd bf       	out	0x3d, r28	; 61
 3a8:	5c 01       	movw	r10, r24
 3aa:	4b 01       	movw	r8, r22
	float min_value=0;
	float norm_max_value=0;
	float norm_min_value=0;
	

    float r=(in_rgb_array[0]-min_value)*255/(max_value-min_value);
 3ac:	fc 01       	movw	r30, r24
 3ae:	60 81       	ld	r22, Z
 3b0:	71 81       	ldd	r23, Z+1	; 0x01
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__floatunsisf>
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	4f e7       	ldi	r20, 0x7F	; 127
 3c0:	53 e4       	ldi	r21, 0x43	; 67
 3c2:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__mulsf3>
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	3f ef       	ldi	r19, 0xFF	; 255
 3ca:	4f e7       	ldi	r20, 0x7F	; 127
 3cc:	57 e4       	ldi	r21, 0x47	; 71
 3ce:	0e 94 f6 05 	call	0xbec	; 0xbec <__divsf3>
 3d2:	16 2f       	mov	r17, r22
 3d4:	7a 87       	std	Y+10, r23	; 0x0a
 3d6:	89 87       	std	Y+9, r24	; 0x09
 3d8:	09 2f       	mov	r16, r25
    float g=(in_rgb_array[1]-min_value)*255/(max_value-min_value);
 3da:	f5 01       	movw	r30, r10
 3dc:	62 81       	ldd	r22, Z+2	; 0x02
 3de:	73 81       	ldd	r23, Z+3	; 0x03
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__floatunsisf>
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	4f e7       	ldi	r20, 0x7F	; 127
 3ee:	53 e4       	ldi	r21, 0x43	; 67
 3f0:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__mulsf3>
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	3f ef       	ldi	r19, 0xFF	; 255
 3f8:	4f e7       	ldi	r20, 0x7F	; 127
 3fa:	57 e4       	ldi	r21, 0x47	; 71
 3fc:	0e 94 f6 05 	call	0xbec	; 0xbec <__divsf3>
 400:	c6 2e       	mov	r12, r22
 402:	d7 2e       	mov	r13, r23
 404:	e8 2e       	mov	r14, r24
 406:	f9 2e       	mov	r15, r25
    float b=(in_rgb_array[2]-min_value)*255/(max_value-min_value);
 408:	f5 01       	movw	r30, r10
 40a:	64 81       	ldd	r22, Z+4	; 0x04
 40c:	75 81       	ldd	r23, Z+5	; 0x05
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__floatunsisf>
 416:	20 e0       	ldi	r18, 0x00	; 0
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	4f e7       	ldi	r20, 0x7F	; 127
 41c:	53 e4       	ldi	r21, 0x43	; 67
 41e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__mulsf3>
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	3f ef       	ldi	r19, 0xFF	; 255
 426:	4f e7       	ldi	r20, 0x7F	; 127
 428:	57 e4       	ldi	r21, 0x47	; 71
 42a:	0e 94 f6 05 	call	0xbec	; 0xbec <__divsf3>
 42e:	46 2e       	mov	r4, r22
 430:	57 2e       	mov	r5, r23
 432:	68 2e       	mov	r6, r24
 434:	79 2e       	mov	r7, r25
    
    if((r>=g)&&(r>=b)) norm_max_value=r;
 436:	2c 2d       	mov	r18, r12
 438:	3d 2d       	mov	r19, r13
 43a:	4e 2d       	mov	r20, r14
 43c:	5f 2d       	mov	r21, r15
 43e:	61 2f       	mov	r22, r17
 440:	7a 85       	ldd	r23, Y+10	; 0x0a
 442:	89 85       	ldd	r24, Y+9	; 0x09
 444:	90 2f       	mov	r25, r16
 446:	0e 94 1a 07 	call	0xe34	; 0xe34 <__gesf2>
 44a:	88 23       	and	r24, r24
 44c:	6c f0       	brlt	.+26     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 44e:	24 2d       	mov	r18, r4
 450:	35 2d       	mov	r19, r5
 452:	46 2d       	mov	r20, r6
 454:	57 2d       	mov	r21, r7
 456:	61 2f       	mov	r22, r17
 458:	7a 85       	ldd	r23, Y+10	; 0x0a
 45a:	89 85       	ldd	r24, Y+9	; 0x09
 45c:	90 2f       	mov	r25, r16
 45e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__gesf2>
 462:	88 23       	and	r24, r24
 464:	0c f0       	brlt	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 466:	1f c2       	rjmp	.+1086   	; 0x8a6 <__LOCK_REGION_LENGTH__+0x4a6>
    else if ((g>=r)&&(g>=b)) norm_max_value=g;
 468:	2c 2d       	mov	r18, r12
 46a:	3d 2d       	mov	r19, r13
 46c:	4e 2d       	mov	r20, r14
 46e:	5f 2d       	mov	r21, r15
 470:	61 2f       	mov	r22, r17
 472:	7a 85       	ldd	r23, Y+10	; 0x0a
 474:	89 85       	ldd	r24, Y+9	; 0x09
 476:	90 2f       	mov	r25, r16
 478:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 47c:	18 16       	cp	r1, r24
 47e:	6c f0       	brlt	.+26     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 480:	24 2d       	mov	r18, r4
 482:	35 2d       	mov	r19, r5
 484:	46 2d       	mov	r20, r6
 486:	57 2d       	mov	r21, r7
 488:	6c 2d       	mov	r22, r12
 48a:	7d 2d       	mov	r23, r13
 48c:	8e 2d       	mov	r24, r14
 48e:	9f 2d       	mov	r25, r15
 490:	0e 94 1a 07 	call	0xe34	; 0xe34 <__gesf2>
 494:	88 23       	and	r24, r24
 496:	64 f5       	brge	.+88     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 498:	de c1       	rjmp	.+956    	; 0x856 <__LOCK_REGION_LENGTH__+0x456>
    else if((b>=r)&&(b>=g)) norm_max_value=b;
 49a:	24 2d       	mov	r18, r4
 49c:	35 2d       	mov	r19, r5
 49e:	46 2d       	mov	r20, r6
 4a0:	57 2d       	mov	r21, r7
 4a2:	61 2f       	mov	r22, r17
 4a4:	7a 85       	ldd	r23, Y+10	; 0x0a
 4a6:	89 85       	ldd	r24, Y+9	; 0x09
 4a8:	90 2f       	mov	r25, r16
 4aa:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 4ae:	18 16       	cp	r1, r24
 4b0:	74 f0       	brlt	.+28     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4b2:	24 2d       	mov	r18, r4
 4b4:	35 2d       	mov	r19, r5
 4b6:	46 2d       	mov	r20, r6
 4b8:	57 2d       	mov	r21, r7
 4ba:	6c 2d       	mov	r22, r12
 4bc:	7d 2d       	mov	r23, r13
 4be:	8e 2d       	mov	r24, r14
 4c0:	9f 2d       	mov	r25, r15
 4c2:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 4c6:	18 16       	cp	r1, r24
 4c8:	0c f0       	brlt	.+2      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4ca:	db c1       	rjmp	.+950    	; 0x882 <__LOCK_REGION_LENGTH__+0x482>
 4cc:	d5 c1       	rjmp	.+938    	; 0x878 <__LOCK_REGION_LENGTH__+0x478>
    
    if((r<=g)&&(r<=b)) norm_min_value=r;
 4ce:	2c 2d       	mov	r18, r12
 4d0:	3d 2d       	mov	r19, r13
 4d2:	4e 2d       	mov	r20, r14
 4d4:	5f 2d       	mov	r21, r15
 4d6:	61 2f       	mov	r22, r17
 4d8:	7a 85       	ldd	r23, Y+10	; 0x0a
 4da:	89 85       	ldd	r24, Y+9	; 0x09
 4dc:	90 2f       	mov	r25, r16
 4de:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 4e2:	18 16       	cp	r1, r24
 4e4:	b4 f0       	brlt	.+44     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>

uint8_t rgb2hsv(uint16_t* in_rgb_array, float* out_hsv_array){
	
	float max_value=65535;
	float min_value=0;
	float norm_max_value=0;
 4e6:	31 2c       	mov	r3, r1
 4e8:	21 2c       	mov	r2, r1
 4ea:	a1 2c       	mov	r10, r1
 4ec:	b1 2c       	mov	r11, r1
 4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
    float r=(in_rgb_array[0]-min_value)*255/(max_value-min_value);
    float g=(in_rgb_array[1]-min_value)*255/(max_value-min_value);
    float b=(in_rgb_array[2]-min_value)*255/(max_value-min_value);
    
    if((r>=g)&&(r>=b)) norm_max_value=r;
    else if ((g>=r)&&(g>=b)) norm_max_value=g;
 4f0:	3c 2c       	mov	r3, r12
 4f2:	2d 2c       	mov	r2, r13
 4f4:	ae 2c       	mov	r10, r14
 4f6:	bf 2c       	mov	r11, r15
    else if((b>=r)&&(b>=g)) norm_max_value=b;
    
    if((r<=g)&&(r<=b)) norm_min_value=r;
 4f8:	24 2d       	mov	r18, r4
 4fa:	35 2d       	mov	r19, r5
 4fc:	46 2d       	mov	r20, r6
 4fe:	57 2d       	mov	r21, r7
 500:	61 2f       	mov	r22, r17
 502:	7a 85       	ldd	r23, Y+10	; 0x0a
 504:	89 85       	ldd	r24, Y+9	; 0x09
 506:	90 2f       	mov	r25, r16
 508:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 50c:	18 16       	cp	r1, r24
 50e:	2c f0       	brlt	.+10     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 510:	39 c0       	rjmp	.+114    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>

uint8_t rgb2hsv(uint16_t* in_rgb_array, float* out_hsv_array){
	
	float max_value=65535;
	float min_value=0;
	float norm_max_value=0;
 512:	31 2c       	mov	r3, r1
 514:	21 2c       	mov	r2, r1
 516:	a1 2c       	mov	r10, r1
 518:	b1 2c       	mov	r11, r1
    if((r>=g)&&(r>=b)) norm_max_value=r;
    else if ((g>=r)&&(g>=b)) norm_max_value=g;
    else if((b>=r)&&(b>=g)) norm_max_value=b;
    
    if((r<=g)&&(r<=b)) norm_min_value=r;
    else if ((g<=r)&&(g<=b)) norm_min_value=g;
 51a:	2c 2d       	mov	r18, r12
 51c:	3d 2d       	mov	r19, r13
 51e:	4e 2d       	mov	r20, r14
 520:	5f 2d       	mov	r21, r15
 522:	61 2f       	mov	r22, r17
 524:	7a 85       	ldd	r23, Y+10	; 0x0a
 526:	89 85       	ldd	r24, Y+9	; 0x09
 528:	90 2f       	mov	r25, r16
 52a:	0e 94 1a 07 	call	0xe34	; 0xe34 <__gesf2>
 52e:	88 23       	and	r24, r24
 530:	64 f0       	brlt	.+24     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 532:	24 2d       	mov	r18, r4
 534:	35 2d       	mov	r19, r5
 536:	46 2d       	mov	r20, r6
 538:	57 2d       	mov	r21, r7
 53a:	6c 2d       	mov	r22, r12
 53c:	7d 2d       	mov	r23, r13
 53e:	8e 2d       	mov	r24, r14
 540:	9f 2d       	mov	r25, r15
 542:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 546:	18 16       	cp	r1, r24
 548:	24 f5       	brge	.+72     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
    else if((b<=r)&&(b<=g)) norm_min_value=b;
 54a:	24 2d       	mov	r18, r4
 54c:	35 2d       	mov	r19, r5
 54e:	46 2d       	mov	r20, r6
 550:	57 2d       	mov	r21, r7
 552:	61 2f       	mov	r22, r17
 554:	7a 85       	ldd	r23, Y+10	; 0x0a
 556:	89 85       	ldd	r24, Y+9	; 0x09
 558:	90 2f       	mov	r25, r16
 55a:	0e 94 1a 07 	call	0xe34	; 0xe34 <__gesf2>
 55e:	88 23       	and	r24, r24
 560:	ec f0       	brlt	.+58     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 562:	24 2d       	mov	r18, r4
 564:	35 2d       	mov	r19, r5
 566:	46 2d       	mov	r20, r6
 568:	57 2d       	mov	r21, r7
 56a:	6c 2d       	mov	r22, r12
 56c:	7d 2d       	mov	r23, r13
 56e:	8e 2d       	mov	r24, r14
 570:	9f 2d       	mov	r25, r15
 572:	0e 94 1a 07 	call	0xe34	; 0xe34 <__gesf2>
 576:	88 23       	and	r24, r24
 578:	b4 f0       	brlt	.+44     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 57a:	49 82       	std	Y+1, r4	; 0x01
 57c:	5a 82       	std	Y+2, r5	; 0x02
 57e:	6b 82       	std	Y+3, r6	; 0x03
 580:	7c 82       	std	Y+4, r7	; 0x04
 582:	39 c0       	rjmp	.+114    	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
    
    if((r>=g)&&(r>=b)) norm_max_value=r;
    else if ((g>=r)&&(g>=b)) norm_max_value=g;
    else if((b>=r)&&(b>=g)) norm_max_value=b;
    
    if((r<=g)&&(r<=b)) norm_min_value=r;
 584:	19 83       	std	Y+1, r17	; 0x01
 586:	fa 85       	ldd	r31, Y+10	; 0x0a
 588:	fa 83       	std	Y+2, r31	; 0x02
 58a:	89 85       	ldd	r24, Y+9	; 0x09
 58c:	8b 83       	std	Y+3, r24	; 0x03
 58e:	0c 83       	std	Y+4, r16	; 0x04
 590:	32 c0       	rjmp	.+100    	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
    else if ((g<=r)&&(g<=b)) norm_min_value=g;
 592:	c9 82       	std	Y+1, r12	; 0x01
 594:	da 82       	std	Y+2, r13	; 0x02
 596:	eb 82       	std	Y+3, r14	; 0x03
 598:	fc 82       	std	Y+4, r15	; 0x04
 59a:	2d c0       	rjmp	.+90     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
uint8_t rgb2hsv(uint16_t* in_rgb_array, float* out_hsv_array){
	
	float max_value=65535;
	float min_value=0;
	float norm_max_value=0;
	float norm_min_value=0;
 59c:	19 82       	std	Y+1, r1	; 0x01
 59e:	1a 82       	std	Y+2, r1	; 0x02
 5a0:	1b 82       	std	Y+3, r1	; 0x03
 5a2:	1c 82       	std	Y+4, r1	; 0x04
 5a4:	28 c0       	rjmp	.+80     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5a6:	19 82       	std	Y+1, r1	; 0x01
 5a8:	1a 82       	std	Y+2, r1	; 0x02
 5aa:	1b 82       	std	Y+3, r1	; 0x03
 5ac:	1c 82       	std	Y+4, r1	; 0x04
 5ae:	23 c0       	rjmp	.+70     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
    
    if((r>=g)&&(r>=b)) norm_max_value=r;
    else if ((g>=r)&&(g>=b)) norm_max_value=g;
    else if((b>=r)&&(b>=g)) norm_max_value=b;
    
    if((r<=g)&&(r<=b)) norm_min_value=r;
 5b0:	19 83       	std	Y+1, r17	; 0x01
 5b2:	ea 85       	ldd	r30, Y+10	; 0x0a
 5b4:	ea 83       	std	Y+2, r30	; 0x02
 5b6:	f9 85       	ldd	r31, Y+9	; 0x09
 5b8:	fb 83       	std	Y+3, r31	; 0x03
 5ba:	0c 83       	std	Y+4, r16	; 0x04
 5bc:	1c c0       	rjmp	.+56     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
    float g=(in_rgb_array[1]-min_value)*255/(max_value-min_value);
    float b=(in_rgb_array[2]-min_value)*255/(max_value-min_value);
    
    if((r>=g)&&(r>=b)) norm_max_value=r;
    else if ((g>=r)&&(g>=b)) norm_max_value=g;
    else if((b>=r)&&(b>=g)) norm_max_value=b;
 5be:	34 2c       	mov	r3, r4
 5c0:	25 2c       	mov	r2, r5
 5c2:	a6 2c       	mov	r10, r6
 5c4:	b7 2c       	mov	r11, r7
    
    if((r<=g)&&(r<=b)) norm_min_value=r;
 5c6:	19 83       	std	Y+1, r17	; 0x01
 5c8:	8a 85       	ldd	r24, Y+10	; 0x0a
 5ca:	8a 83       	std	Y+2, r24	; 0x02
 5cc:	e9 85       	ldd	r30, Y+9	; 0x09
 5ce:	eb 83       	std	Y+3, r30	; 0x03
 5d0:	0c 83       	std	Y+4, r16	; 0x04
 5d2:	11 c0       	rjmp	.+34     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>

    float r=(in_rgb_array[0]-min_value)*255/(max_value-min_value);
    float g=(in_rgb_array[1]-min_value)*255/(max_value-min_value);
    float b=(in_rgb_array[2]-min_value)*255/(max_value-min_value);
    
    if((r>=g)&&(r>=b)) norm_max_value=r;
 5d4:	31 2e       	mov	r3, r17
 5d6:	2a 84       	ldd	r2, Y+10	; 0x0a
 5d8:	a9 84       	ldd	r10, Y+9	; 0x09
 5da:	b0 2e       	mov	r11, r16
    else if ((g>=r)&&(g>=b)) norm_max_value=g;
    else if((b>=r)&&(b>=g)) norm_max_value=b;
    
    if((r<=g)&&(r<=b)) norm_min_value=r;
 5dc:	19 83       	std	Y+1, r17	; 0x01
 5de:	2a 82       	std	Y+2, r2	; 0x02
 5e0:	ab 82       	std	Y+3, r10	; 0x03
 5e2:	0c 83       	std	Y+4, r16	; 0x04
 5e4:	08 c0       	rjmp	.+16     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>

    float r=(in_rgb_array[0]-min_value)*255/(max_value-min_value);
    float g=(in_rgb_array[1]-min_value)*255/(max_value-min_value);
    float b=(in_rgb_array[2]-min_value)*255/(max_value-min_value);
    
    if((r>=g)&&(r>=b)) norm_max_value=r;
 5e6:	31 2e       	mov	r3, r17
 5e8:	2a 84       	ldd	r2, Y+10	; 0x0a
 5ea:	a9 84       	ldd	r10, Y+9	; 0x09
 5ec:	b0 2e       	mov	r11, r16
    else if ((g>=r)&&(g>=b)) norm_max_value=g;
    else if((b>=r)&&(b>=g)) norm_max_value=b;
    
    if((r<=g)&&(r<=b)) norm_min_value=r;
    else if ((g<=r)&&(g<=b)) norm_min_value=g;
 5ee:	c9 82       	std	Y+1, r12	; 0x01
 5f0:	da 82       	std	Y+2, r13	; 0x02
 5f2:	eb 82       	std	Y+3, r14	; 0x03
 5f4:	fc 82       	std	Y+4, r15	; 0x04
    else if((b<=r)&&(b<=g)) norm_min_value=b;
    
    if(norm_max_value==norm_min_value) return 0; //colour not defined
 5f6:	23 2d       	mov	r18, r3
 5f8:	32 2d       	mov	r19, r2
 5fa:	4a 2d       	mov	r20, r10
 5fc:	5b 2d       	mov	r21, r11
 5fe:	69 81       	ldd	r22, Y+1	; 0x01
 600:	7a 81       	ldd	r23, Y+2	; 0x02
 602:	8b 81       	ldd	r24, Y+3	; 0x03
 604:	9c 81       	ldd	r25, Y+4	; 0x04
 606:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 60a:	88 23       	and	r24, r24
 60c:	09 f4       	brne	.+2      	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 60e:	1f c1       	rjmp	.+574    	; 0x84e <__LOCK_REGION_LENGTH__+0x44e>


    out_hsv_array[2]=norm_max_value;//V
 610:	83 2d       	mov	r24, r3
 612:	92 2d       	mov	r25, r2
 614:	aa 2d       	mov	r26, r10
 616:	bb 2d       	mov	r27, r11
 618:	f4 01       	movw	r30, r8
 61a:	80 87       	std	Z+8, r24	; 0x08
 61c:	91 87       	std	Z+9, r25	; 0x09
 61e:	a2 87       	std	Z+10, r26	; 0x0a
 620:	b3 87       	std	Z+11, r27	; 0x0b
    
    //S
    if(norm_max_value==0) *(out_hsv_array+1)=0;
 622:	20 e0       	ldi	r18, 0x00	; 0
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	a9 01       	movw	r20, r18
 628:	63 2d       	mov	r22, r3
 62a:	72 2d       	mov	r23, r2
 62c:	8a 2d       	mov	r24, r10
 62e:	9b 2d       	mov	r25, r11
 630:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 634:	81 11       	cpse	r24, r1
 636:	06 c0       	rjmp	.+12     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 638:	f4 01       	movw	r30, r8
 63a:	14 82       	std	Z+4, r1	; 0x04
 63c:	15 82       	std	Z+5, r1	; 0x05
 63e:	16 82       	std	Z+6, r1	; 0x06
 640:	17 82       	std	Z+7, r1	; 0x07
 642:	17 c0       	rjmp	.+46     	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
    else out_hsv_array[1]=1-norm_min_value/norm_max_value;
 644:	23 2d       	mov	r18, r3
 646:	32 2d       	mov	r19, r2
 648:	4a 2d       	mov	r20, r10
 64a:	5b 2d       	mov	r21, r11
 64c:	69 81       	ldd	r22, Y+1	; 0x01
 64e:	7a 81       	ldd	r23, Y+2	; 0x02
 650:	8b 81       	ldd	r24, Y+3	; 0x03
 652:	9c 81       	ldd	r25, Y+4	; 0x04
 654:	0e 94 f6 05 	call	0xbec	; 0xbec <__divsf3>
 658:	9b 01       	movw	r18, r22
 65a:	ac 01       	movw	r20, r24
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	80 e8       	ldi	r24, 0x80	; 128
 662:	9f e3       	ldi	r25, 0x3F	; 63
 664:	0e 94 84 05 	call	0xb08	; 0xb08 <__subsf3>
 668:	f4 01       	movw	r30, r8
 66a:	64 83       	std	Z+4, r22	; 0x04
 66c:	75 83       	std	Z+5, r23	; 0x05
 66e:	86 83       	std	Z+6, r24	; 0x06
 670:	97 83       	std	Z+7, r25	; 0x07
    
    //H
    if((norm_max_value==r)&&(g>=b))
 672:	23 2d       	mov	r18, r3
 674:	32 2d       	mov	r19, r2
 676:	4a 2d       	mov	r20, r10
 678:	5b 2d       	mov	r21, r11
 67a:	61 2f       	mov	r22, r17
 67c:	7a 85       	ldd	r23, Y+10	; 0x0a
 67e:	89 85       	ldd	r24, Y+9	; 0x09
 680:	90 2f       	mov	r25, r16
 682:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 686:	81 11       	cpse	r24, r1
 688:	6a c0       	rjmp	.+212    	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
 68a:	24 2d       	mov	r18, r4
 68c:	35 2d       	mov	r19, r5
 68e:	46 2d       	mov	r20, r6
 690:	57 2d       	mov	r21, r7
 692:	6c 2d       	mov	r22, r12
 694:	7d 2d       	mov	r23, r13
 696:	8e 2d       	mov	r24, r14
 698:	9f 2d       	mov	r25, r15
 69a:	0e 94 1a 07 	call	0xe34	; 0xe34 <__gesf2>
 69e:	88 23       	and	r24, r24
 6a0:	0c f4       	brge	.+2      	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 6a2:	0e c1       	rjmp	.+540    	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
    out_hsv_array[0]=60*(g-b)/(norm_max_value-norm_min_value);
 6a4:	24 2d       	mov	r18, r4
 6a6:	35 2d       	mov	r19, r5
 6a8:	46 2d       	mov	r20, r6
 6aa:	57 2d       	mov	r21, r7
 6ac:	6c 2d       	mov	r22, r12
 6ae:	7d 2d       	mov	r23, r13
 6b0:	8e 2d       	mov	r24, r14
 6b2:	9f 2d       	mov	r25, r15
 6b4:	0e 94 84 05 	call	0xb08	; 0xb08 <__subsf3>
 6b8:	20 e0       	ldi	r18, 0x00	; 0
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	40 e7       	ldi	r20, 0x70	; 112
 6be:	52 e4       	ldi	r21, 0x42	; 66
 6c0:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__mulsf3>
 6c4:	6d 83       	std	Y+5, r22	; 0x05
 6c6:	7e 83       	std	Y+6, r23	; 0x06
 6c8:	8f 83       	std	Y+7, r24	; 0x07
 6ca:	98 87       	std	Y+8, r25	; 0x08
 6cc:	29 81       	ldd	r18, Y+1	; 0x01
 6ce:	3a 81       	ldd	r19, Y+2	; 0x02
 6d0:	4b 81       	ldd	r20, Y+3	; 0x03
 6d2:	5c 81       	ldd	r21, Y+4	; 0x04
 6d4:	63 2d       	mov	r22, r3
 6d6:	72 2d       	mov	r23, r2
 6d8:	8a 2d       	mov	r24, r10
 6da:	9b 2d       	mov	r25, r11
 6dc:	0e 94 84 05 	call	0xb08	; 0xb08 <__subsf3>
 6e0:	9b 01       	movw	r18, r22
 6e2:	ac 01       	movw	r20, r24
 6e4:	6d 81       	ldd	r22, Y+5	; 0x05
 6e6:	7e 81       	ldd	r23, Y+6	; 0x06
 6e8:	8f 81       	ldd	r24, Y+7	; 0x07
 6ea:	98 85       	ldd	r25, Y+8	; 0x08
 6ec:	0e 94 f6 05 	call	0xbec	; 0xbec <__divsf3>
 6f0:	f4 01       	movw	r30, r8
 6f2:	60 83       	st	Z, r22
 6f4:	71 83       	std	Z+1, r23	; 0x01
 6f6:	82 83       	std	Z+2, r24	; 0x02
 6f8:	93 83       	std	Z+3, r25	; 0x03
 6fa:	e2 c0       	rjmp	.+452    	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
    if ((norm_max_value==r)&&(g<b))
    out_hsv_array[0]=60*(g-b)/(norm_max_value-norm_min_value)+360;
 6fc:	24 2d       	mov	r18, r4
 6fe:	35 2d       	mov	r19, r5
 700:	46 2d       	mov	r20, r6
 702:	57 2d       	mov	r21, r7
 704:	6c 2d       	mov	r22, r12
 706:	7d 2d       	mov	r23, r13
 708:	8e 2d       	mov	r24, r14
 70a:	9f 2d       	mov	r25, r15
 70c:	0e 94 84 05 	call	0xb08	; 0xb08 <__subsf3>
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	40 e7       	ldi	r20, 0x70	; 112
 716:	52 e4       	ldi	r21, 0x42	; 66
 718:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__mulsf3>
 71c:	6d 83       	std	Y+5, r22	; 0x05
 71e:	7e 83       	std	Y+6, r23	; 0x06
 720:	8f 83       	std	Y+7, r24	; 0x07
 722:	98 87       	std	Y+8, r25	; 0x08
 724:	29 81       	ldd	r18, Y+1	; 0x01
 726:	3a 81       	ldd	r19, Y+2	; 0x02
 728:	4b 81       	ldd	r20, Y+3	; 0x03
 72a:	5c 81       	ldd	r21, Y+4	; 0x04
 72c:	63 2d       	mov	r22, r3
 72e:	72 2d       	mov	r23, r2
 730:	8a 2d       	mov	r24, r10
 732:	9b 2d       	mov	r25, r11
 734:	0e 94 84 05 	call	0xb08	; 0xb08 <__subsf3>
 738:	9b 01       	movw	r18, r22
 73a:	ac 01       	movw	r20, r24
 73c:	6d 81       	ldd	r22, Y+5	; 0x05
 73e:	7e 81       	ldd	r23, Y+6	; 0x06
 740:	8f 81       	ldd	r24, Y+7	; 0x07
 742:	98 85       	ldd	r25, Y+8	; 0x08
 744:	0e 94 f6 05 	call	0xbec	; 0xbec <__divsf3>
 748:	20 e0       	ldi	r18, 0x00	; 0
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	44 eb       	ldi	r20, 0xB4	; 180
 74e:	53 e4       	ldi	r21, 0x43	; 67
 750:	0e 94 85 05 	call	0xb0a	; 0xb0a <__addsf3>
 754:	f4 01       	movw	r30, r8
 756:	60 83       	st	Z, r22
 758:	71 83       	std	Z+1, r23	; 0x01
 75a:	82 83       	std	Z+2, r24	; 0x02
 75c:	93 83       	std	Z+3, r25	; 0x03
    if (norm_max_value==g)
 75e:	23 2d       	mov	r18, r3
 760:	32 2d       	mov	r19, r2
 762:	4a 2d       	mov	r20, r10
 764:	5b 2d       	mov	r21, r11
 766:	6c 2d       	mov	r22, r12
 768:	7d 2d       	mov	r23, r13
 76a:	8e 2d       	mov	r24, r14
 76c:	9f 2d       	mov	r25, r15
 76e:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 772:	81 11       	cpse	r24, r1
 774:	31 c0       	rjmp	.+98     	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
    out_hsv_array[0]=60*(b-r)/(norm_max_value-norm_min_value)+120;
 776:	21 2f       	mov	r18, r17
 778:	3a 85       	ldd	r19, Y+10	; 0x0a
 77a:	49 85       	ldd	r20, Y+9	; 0x09
 77c:	50 2f       	mov	r21, r16
 77e:	64 2d       	mov	r22, r4
 780:	75 2d       	mov	r23, r5
 782:	86 2d       	mov	r24, r6
 784:	97 2d       	mov	r25, r7
 786:	0e 94 84 05 	call	0xb08	; 0xb08 <__subsf3>
 78a:	20 e0       	ldi	r18, 0x00	; 0
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	40 e7       	ldi	r20, 0x70	; 112
 790:	52 e4       	ldi	r21, 0x42	; 66
 792:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__mulsf3>
 796:	6d 83       	std	Y+5, r22	; 0x05
 798:	7e 83       	std	Y+6, r23	; 0x06
 79a:	8f 83       	std	Y+7, r24	; 0x07
 79c:	98 87       	std	Y+8, r25	; 0x08
 79e:	29 81       	ldd	r18, Y+1	; 0x01
 7a0:	3a 81       	ldd	r19, Y+2	; 0x02
 7a2:	4b 81       	ldd	r20, Y+3	; 0x03
 7a4:	5c 81       	ldd	r21, Y+4	; 0x04
 7a6:	63 2d       	mov	r22, r3
 7a8:	72 2d       	mov	r23, r2
 7aa:	8a 2d       	mov	r24, r10
 7ac:	9b 2d       	mov	r25, r11
 7ae:	0e 94 84 05 	call	0xb08	; 0xb08 <__subsf3>
 7b2:	9b 01       	movw	r18, r22
 7b4:	ac 01       	movw	r20, r24
 7b6:	6d 81       	ldd	r22, Y+5	; 0x05
 7b8:	7e 81       	ldd	r23, Y+6	; 0x06
 7ba:	8f 81       	ldd	r24, Y+7	; 0x07
 7bc:	98 85       	ldd	r25, Y+8	; 0x08
 7be:	0e 94 f6 05 	call	0xbec	; 0xbec <__divsf3>
 7c2:	20 e0       	ldi	r18, 0x00	; 0
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	40 ef       	ldi	r20, 0xF0	; 240
 7c8:	52 e4       	ldi	r21, 0x42	; 66
 7ca:	0e 94 85 05 	call	0xb0a	; 0xb0a <__addsf3>
 7ce:	f4 01       	movw	r30, r8
 7d0:	60 83       	st	Z, r22
 7d2:	71 83       	std	Z+1, r23	; 0x01
 7d4:	82 83       	std	Z+2, r24	; 0x02
 7d6:	93 83       	std	Z+3, r25	; 0x03
    if (norm_max_value==b)
 7d8:	23 2d       	mov	r18, r3
 7da:	32 2d       	mov	r19, r2
 7dc:	4a 2d       	mov	r20, r10
 7de:	5b 2d       	mov	r21, r11
 7e0:	64 2d       	mov	r22, r4
 7e2:	75 2d       	mov	r23, r5
 7e4:	86 2d       	mov	r24, r6
 7e6:	97 2d       	mov	r25, r7
 7e8:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 7ec:	81 11       	cpse	r24, r1
 7ee:	31 c0       	rjmp	.+98     	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
    out_hsv_array[0]=60*(r-g)/(norm_max_value-norm_min_value)+240;
 7f0:	2c 2d       	mov	r18, r12
 7f2:	3d 2d       	mov	r19, r13
 7f4:	4e 2d       	mov	r20, r14
 7f6:	5f 2d       	mov	r21, r15
 7f8:	61 2f       	mov	r22, r17
 7fa:	7a 85       	ldd	r23, Y+10	; 0x0a
 7fc:	89 85       	ldd	r24, Y+9	; 0x09
 7fe:	90 2f       	mov	r25, r16
 800:	0e 94 84 05 	call	0xb08	; 0xb08 <__subsf3>
 804:	20 e0       	ldi	r18, 0x00	; 0
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	40 e7       	ldi	r20, 0x70	; 112
 80a:	52 e4       	ldi	r21, 0x42	; 66
 80c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__mulsf3>
 810:	6b 01       	movw	r12, r22
 812:	7c 01       	movw	r14, r24
 814:	29 81       	ldd	r18, Y+1	; 0x01
 816:	3a 81       	ldd	r19, Y+2	; 0x02
 818:	4b 81       	ldd	r20, Y+3	; 0x03
 81a:	5c 81       	ldd	r21, Y+4	; 0x04
 81c:	63 2d       	mov	r22, r3
 81e:	72 2d       	mov	r23, r2
 820:	8a 2d       	mov	r24, r10
 822:	9b 2d       	mov	r25, r11
 824:	0e 94 84 05 	call	0xb08	; 0xb08 <__subsf3>
 828:	9b 01       	movw	r18, r22
 82a:	ac 01       	movw	r20, r24
 82c:	c7 01       	movw	r24, r14
 82e:	b6 01       	movw	r22, r12
 830:	0e 94 f6 05 	call	0xbec	; 0xbec <__divsf3>
 834:	20 e0       	ldi	r18, 0x00	; 0
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	40 e7       	ldi	r20, 0x70	; 112
 83a:	53 e4       	ldi	r21, 0x43	; 67
 83c:	0e 94 85 05 	call	0xb0a	; 0xb0a <__addsf3>
 840:	f4 01       	movw	r30, r8
 842:	60 83       	st	Z, r22
 844:	71 83       	std	Z+1, r23	; 0x01
 846:	82 83       	std	Z+2, r24	; 0x02
 848:	93 83       	std	Z+3, r25	; 0x03
    
    return 1;//colour defined
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	7d c0       	rjmp	.+250    	; 0x948 <__stack+0x49>
    
    if((r<=g)&&(r<=b)) norm_min_value=r;
    else if ((g<=r)&&(g<=b)) norm_min_value=g;
    else if((b<=r)&&(b<=g)) norm_min_value=b;
    
    if(norm_max_value==norm_min_value) return 0; //colour not defined
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	7b c0       	rjmp	.+246    	; 0x948 <__stack+0x49>
    if (norm_max_value==g)
    out_hsv_array[0]=60*(b-r)/(norm_max_value-norm_min_value)+120;
    if (norm_max_value==b)
    out_hsv_array[0]=60*(r-g)/(norm_max_value-norm_min_value)+240;
    
    return 1;//colour defined
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	79 c0       	rjmp	.+242    	; 0x948 <__stack+0x49>
    float g=(in_rgb_array[1]-min_value)*255/(max_value-min_value);
    float b=(in_rgb_array[2]-min_value)*255/(max_value-min_value);
    
    if((r>=g)&&(r>=b)) norm_max_value=r;
    else if ((g>=r)&&(g>=b)) norm_max_value=g;
    else if((b>=r)&&(b>=g)) norm_max_value=b;
 856:	24 2d       	mov	r18, r4
 858:	35 2d       	mov	r19, r5
 85a:	46 2d       	mov	r20, r6
 85c:	57 2d       	mov	r21, r7
 85e:	61 2f       	mov	r22, r17
 860:	7a 85       	ldd	r23, Y+10	; 0x0a
 862:	89 85       	ldd	r24, Y+9	; 0x09
 864:	90 2f       	mov	r25, r16
 866:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 86a:	18 16       	cp	r1, r24
 86c:	bc f5       	brge	.+110    	; 0x8dc <__LOCK_REGION_LENGTH__+0x4dc>

uint8_t rgb2hsv(uint16_t* in_rgb_array, float* out_hsv_array){
	
	float max_value=65535;
	float min_value=0;
	float norm_max_value=0;
 86e:	31 2c       	mov	r3, r1
 870:	21 2c       	mov	r2, r1
 872:	a1 2c       	mov	r10, r1
 874:	b1 2c       	mov	r11, r1
 876:	40 ce       	rjmp	.-896    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 878:	31 2c       	mov	r3, r1
 87a:	21 2c       	mov	r2, r1
 87c:	a1 2c       	mov	r10, r1
 87e:	b1 2c       	mov	r11, r1
 880:	04 c0       	rjmp	.+8      	; 0x88a <__LOCK_REGION_LENGTH__+0x48a>
    float g=(in_rgb_array[1]-min_value)*255/(max_value-min_value);
    float b=(in_rgb_array[2]-min_value)*255/(max_value-min_value);
    
    if((r>=g)&&(r>=b)) norm_max_value=r;
    else if ((g>=r)&&(g>=b)) norm_max_value=g;
    else if((b>=r)&&(b>=g)) norm_max_value=b;
 882:	34 2c       	mov	r3, r4
 884:	25 2c       	mov	r2, r5
 886:	a6 2c       	mov	r10, r6
 888:	b7 2c       	mov	r11, r7
    
    if((r<=g)&&(r<=b)) norm_min_value=r;
 88a:	2c 2d       	mov	r18, r12
 88c:	3d 2d       	mov	r19, r13
 88e:	4e 2d       	mov	r20, r14
 890:	5f 2d       	mov	r21, r15
 892:	61 2f       	mov	r22, r17
 894:	7a 85       	ldd	r23, Y+10	; 0x0a
 896:	89 85       	ldd	r24, Y+9	; 0x09
 898:	90 2f       	mov	r25, r16
 89a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 89e:	18 16       	cp	r1, r24
 8a0:	0c f4       	brge	.+2      	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
 8a2:	3b ce       	rjmp	.-906    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 8a4:	85 ce       	rjmp	.-758    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 8a6:	2c 2d       	mov	r18, r12
 8a8:	3d 2d       	mov	r19, r13
 8aa:	4e 2d       	mov	r20, r14
 8ac:	5f 2d       	mov	r21, r15
 8ae:	61 2f       	mov	r22, r17
 8b0:	7a 85       	ldd	r23, Y+10	; 0x0a
 8b2:	89 85       	ldd	r24, Y+9	; 0x09
 8b4:	90 2f       	mov	r25, r16
 8b6:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 8ba:	18 16       	cp	r1, r24
 8bc:	9c f1       	brlt	.+102    	; 0x924 <__stack+0x25>
 8be:	20 c0       	rjmp	.+64     	; 0x900 <__stack+0x1>
    else out_hsv_array[1]=1-norm_min_value/norm_max_value;
    
    //H
    if((norm_max_value==r)&&(g>=b))
    out_hsv_array[0]=60*(g-b)/(norm_max_value-norm_min_value);
    if ((norm_max_value==r)&&(g<b))
 8c0:	24 2d       	mov	r18, r4
 8c2:	35 2d       	mov	r19, r5
 8c4:	46 2d       	mov	r20, r6
 8c6:	57 2d       	mov	r21, r7
 8c8:	6c 2d       	mov	r22, r12
 8ca:	7d 2d       	mov	r23, r13
 8cc:	8e 2d       	mov	r24, r14
 8ce:	9f 2d       	mov	r25, r15
 8d0:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 8d4:	88 23       	and	r24, r24
 8d6:	0c f4       	brge	.+2      	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
 8d8:	11 cf       	rjmp	.-478    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 8da:	41 cf       	rjmp	.-382    	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
    float g=(in_rgb_array[1]-min_value)*255/(max_value-min_value);
    float b=(in_rgb_array[2]-min_value)*255/(max_value-min_value);
    
    if((r>=g)&&(r>=b)) norm_max_value=r;
    else if ((g>=r)&&(g>=b)) norm_max_value=g;
    else if((b>=r)&&(b>=g)) norm_max_value=b;
 8dc:	24 2d       	mov	r18, r4
 8de:	35 2d       	mov	r19, r5
 8e0:	46 2d       	mov	r20, r6
 8e2:	57 2d       	mov	r21, r7
 8e4:	6c 2d       	mov	r22, r12
 8e6:	7d 2d       	mov	r23, r13
 8e8:	8e 2d       	mov	r24, r14
 8ea:	9f 2d       	mov	r25, r15
 8ec:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 8f0:	18 16       	cp	r1, r24
 8f2:	0c f0       	brlt	.+2      	; 0x8f6 <__LOCK_REGION_LENGTH__+0x4f6>
 8f4:	64 ce       	rjmp	.-824    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>

uint8_t rgb2hsv(uint16_t* in_rgb_array, float* out_hsv_array){
	
	float max_value=65535;
	float min_value=0;
	float norm_max_value=0;
 8f6:	31 2c       	mov	r3, r1
 8f8:	21 2c       	mov	r2, r1
 8fa:	a1 2c       	mov	r10, r1
 8fc:	b1 2c       	mov	r11, r1
 8fe:	c5 cf       	rjmp	.-118    	; 0x88a <__LOCK_REGION_LENGTH__+0x48a>
    
    if((r>=g)&&(r>=b)) norm_max_value=r;
    else if ((g>=r)&&(g>=b)) norm_max_value=g;
    else if((b>=r)&&(b>=g)) norm_max_value=b;
    
    if((r<=g)&&(r<=b)) norm_min_value=r;
 900:	24 2d       	mov	r18, r4
 902:	35 2d       	mov	r19, r5
 904:	46 2d       	mov	r20, r6
 906:	57 2d       	mov	r21, r7
 908:	61 2f       	mov	r22, r17
 90a:	7a 85       	ldd	r23, Y+10	; 0x0a
 90c:	89 85       	ldd	r24, Y+9	; 0x09
 90e:	90 2f       	mov	r25, r16
 910:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 914:	18 16       	cp	r1, r24
 916:	0c f0       	brlt	.+2      	; 0x91a <__stack+0x1b>
 918:	5d ce       	rjmp	.-838    	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>

    float r=(in_rgb_array[0]-min_value)*255/(max_value-min_value);
    float g=(in_rgb_array[1]-min_value)*255/(max_value-min_value);
    float b=(in_rgb_array[2]-min_value)*255/(max_value-min_value);
    
    if((r>=g)&&(r>=b)) norm_max_value=r;
 91a:	31 2e       	mov	r3, r17
 91c:	2a 84       	ldd	r2, Y+10	; 0x0a
 91e:	a9 84       	ldd	r10, Y+9	; 0x09
 920:	b0 2e       	mov	r11, r16
 922:	07 ce       	rjmp	.-1010   	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
    else if ((g>=r)&&(g>=b)) norm_max_value=g;
    else if((b>=r)&&(b>=g)) norm_max_value=b;
    
    if((r<=g)&&(r<=b)) norm_min_value=r;
    else if ((g<=r)&&(g<=b)) norm_min_value=g;
 924:	24 2d       	mov	r18, r4
 926:	35 2d       	mov	r19, r5
 928:	46 2d       	mov	r20, r6
 92a:	57 2d       	mov	r21, r7
 92c:	6c 2d       	mov	r22, r12
 92e:	7d 2d       	mov	r23, r13
 930:	8e 2d       	mov	r24, r14
 932:	9f 2d       	mov	r25, r15
 934:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 938:	18 16       	cp	r1, r24
 93a:	0c f0       	brlt	.+2      	; 0x93e <__stack+0x3f>
 93c:	54 ce       	rjmp	.-856    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>

    float r=(in_rgb_array[0]-min_value)*255/(max_value-min_value);
    float g=(in_rgb_array[1]-min_value)*255/(max_value-min_value);
    float b=(in_rgb_array[2]-min_value)*255/(max_value-min_value);
    
    if((r>=g)&&(r>=b)) norm_max_value=r;
 93e:	31 2e       	mov	r3, r17
 940:	2a 84       	ldd	r2, Y+10	; 0x0a
 942:	a9 84       	ldd	r10, Y+9	; 0x09
 944:	b0 2e       	mov	r11, r16
 946:	0d ce       	rjmp	.-998    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
    out_hsv_array[0]=60*(b-r)/(norm_max_value-norm_min_value)+120;
    if (norm_max_value==b)
    out_hsv_array[0]=60*(r-g)/(norm_max_value-norm_min_value)+240;
    
    return 1;//colour defined
    }
 948:	2a 96       	adiw	r28, 0x0a	; 10
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	f8 94       	cli
 94e:	de bf       	out	0x3e, r29	; 62
 950:	0f be       	out	0x3f, r0	; 63
 952:	cd bf       	out	0x3d, r28	; 61
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	1f 91       	pop	r17
 95a:	0f 91       	pop	r16
 95c:	ff 90       	pop	r15
 95e:	ef 90       	pop	r14
 960:	df 90       	pop	r13
 962:	cf 90       	pop	r12
 964:	bf 90       	pop	r11
 966:	af 90       	pop	r10
 968:	9f 90       	pop	r9
 96a:	8f 90       	pop	r8
 96c:	7f 90       	pop	r7
 96e:	6f 90       	pop	r6
 970:	5f 90       	pop	r5
 972:	4f 90       	pop	r4
 974:	3f 90       	pop	r3
 976:	2f 90       	pop	r2
 978:	08 95       	ret

0000097a <getColourCode>:

uint8_t getColourCode(float hue){
 97a:	cf 92       	push	r12
 97c:	df 92       	push	r13
 97e:	ef 92       	push	r14
 980:	ff 92       	push	r15
 982:	6b 01       	movw	r12, r22
 984:	7c 01       	movw	r14, r24
	
	if ((hue>=345)||(hue<15)) return 0;//Code of red colour
 986:	20 e0       	ldi	r18, 0x00	; 0
 988:	30 e8       	ldi	r19, 0x80	; 128
 98a:	4c ea       	ldi	r20, 0xAC	; 172
 98c:	53 e4       	ldi	r21, 0x43	; 67
 98e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__gesf2>
 992:	88 23       	and	r24, r24
 994:	0c f0       	brlt	.+2      	; 0x998 <getColourCode+0x1e>
 996:	87 c0       	rjmp	.+270    	; 0xaa6 <getColourCode+0x12c>
 998:	20 e0       	ldi	r18, 0x00	; 0
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	40 e7       	ldi	r20, 0x70	; 112
 99e:	51 e4       	ldi	r21, 0x41	; 65
 9a0:	c7 01       	movw	r24, r14
 9a2:	b6 01       	movw	r22, r12
 9a4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 9a8:	88 23       	and	r24, r24
 9aa:	0c f4       	brge	.+2      	; 0x9ae <getColourCode+0x34>
 9ac:	7e c0       	rjmp	.+252    	; 0xaaa <getColourCode+0x130>
	else if ((hue>=15)&&(hue<30)) return 1;//Code of orange colour
 9ae:	20 e0       	ldi	r18, 0x00	; 0
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	40 e7       	ldi	r20, 0x70	; 112
 9b4:	51 e4       	ldi	r21, 0x41	; 65
 9b6:	c7 01       	movw	r24, r14
 9b8:	b6 01       	movw	r22, r12
 9ba:	0e 94 1a 07 	call	0xe34	; 0xe34 <__gesf2>
 9be:	88 23       	and	r24, r24
 9c0:	5c f0       	brlt	.+22     	; 0x9d8 <getColourCode+0x5e>
 9c2:	20 e0       	ldi	r18, 0x00	; 0
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	40 ef       	ldi	r20, 0xF0	; 240
 9c8:	51 e4       	ldi	r21, 0x41	; 65
 9ca:	c7 01       	movw	r24, r14
 9cc:	b6 01       	movw	r22, r12
 9ce:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 9d2:	88 23       	and	r24, r24
 9d4:	0c f4       	brge	.+2      	; 0x9d8 <getColourCode+0x5e>
 9d6:	6b c0       	rjmp	.+214    	; 0xaae <getColourCode+0x134>
	else if ((hue>=30)&&(hue<90)) return 2;//Code of yellow colour
 9d8:	20 e0       	ldi	r18, 0x00	; 0
 9da:	30 e0       	ldi	r19, 0x00	; 0
 9dc:	40 ef       	ldi	r20, 0xF0	; 240
 9de:	51 e4       	ldi	r21, 0x41	; 65
 9e0:	c7 01       	movw	r24, r14
 9e2:	b6 01       	movw	r22, r12
 9e4:	0e 94 1a 07 	call	0xe34	; 0xe34 <__gesf2>
 9e8:	88 23       	and	r24, r24
 9ea:	5c f0       	brlt	.+22     	; 0xa02 <getColourCode+0x88>
 9ec:	20 e0       	ldi	r18, 0x00	; 0
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	44 eb       	ldi	r20, 0xB4	; 180
 9f2:	52 e4       	ldi	r21, 0x42	; 66
 9f4:	c7 01       	movw	r24, r14
 9f6:	b6 01       	movw	r22, r12
 9f8:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 9fc:	88 23       	and	r24, r24
 9fe:	0c f4       	brge	.+2      	; 0xa02 <getColourCode+0x88>
 a00:	58 c0       	rjmp	.+176    	; 0xab2 <getColourCode+0x138>
	else if ((hue>=90)&&(hue<150)) return 3;//Code of green colour
 a02:	20 e0       	ldi	r18, 0x00	; 0
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	44 eb       	ldi	r20, 0xB4	; 180
 a08:	52 e4       	ldi	r21, 0x42	; 66
 a0a:	c7 01       	movw	r24, r14
 a0c:	b6 01       	movw	r22, r12
 a0e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__gesf2>
 a12:	88 23       	and	r24, r24
 a14:	5c f0       	brlt	.+22     	; 0xa2c <getColourCode+0xb2>
 a16:	20 e0       	ldi	r18, 0x00	; 0
 a18:	30 e0       	ldi	r19, 0x00	; 0
 a1a:	46 e1       	ldi	r20, 0x16	; 22
 a1c:	53 e4       	ldi	r21, 0x43	; 67
 a1e:	c7 01       	movw	r24, r14
 a20:	b6 01       	movw	r22, r12
 a22:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 a26:	88 23       	and	r24, r24
 a28:	0c f4       	brge	.+2      	; 0xa2c <getColourCode+0xb2>
 a2a:	45 c0       	rjmp	.+138    	; 0xab6 <getColourCode+0x13c>
	else if ((hue>=150)&&(hue<210)) return 4;//Code of light blue colour
 a2c:	20 e0       	ldi	r18, 0x00	; 0
 a2e:	30 e0       	ldi	r19, 0x00	; 0
 a30:	46 e1       	ldi	r20, 0x16	; 22
 a32:	53 e4       	ldi	r21, 0x43	; 67
 a34:	c7 01       	movw	r24, r14
 a36:	b6 01       	movw	r22, r12
 a38:	0e 94 1a 07 	call	0xe34	; 0xe34 <__gesf2>
 a3c:	88 23       	and	r24, r24
 a3e:	54 f0       	brlt	.+20     	; 0xa54 <getColourCode+0xda>
 a40:	20 e0       	ldi	r18, 0x00	; 0
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	42 e5       	ldi	r20, 0x52	; 82
 a46:	53 e4       	ldi	r21, 0x43	; 67
 a48:	c7 01       	movw	r24, r14
 a4a:	b6 01       	movw	r22, r12
 a4c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 a50:	88 23       	and	r24, r24
 a52:	9c f1       	brlt	.+102    	; 0xaba <getColourCode+0x140>
	else if ((hue>=210)&&(hue<270)) return 5;//Code of blue colour
 a54:	20 e0       	ldi	r18, 0x00	; 0
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	42 e5       	ldi	r20, 0x52	; 82
 a5a:	53 e4       	ldi	r21, 0x43	; 67
 a5c:	c7 01       	movw	r24, r14
 a5e:	b6 01       	movw	r22, r12
 a60:	0e 94 1a 07 	call	0xe34	; 0xe34 <__gesf2>
 a64:	88 23       	and	r24, r24
 a66:	54 f0       	brlt	.+20     	; 0xa7c <getColourCode+0x102>
 a68:	20 e0       	ldi	r18, 0x00	; 0
 a6a:	30 e0       	ldi	r19, 0x00	; 0
 a6c:	47 e8       	ldi	r20, 0x87	; 135
 a6e:	53 e4       	ldi	r21, 0x43	; 67
 a70:	c7 01       	movw	r24, r14
 a72:	b6 01       	movw	r22, r12
 a74:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 a78:	88 23       	and	r24, r24
 a7a:	0c f1       	brlt	.+66     	; 0xabe <getColourCode+0x144>
	else if ((hue>=270)&&(hue<345)) return 6;//Code of pink colour
 a7c:	20 e0       	ldi	r18, 0x00	; 0
 a7e:	30 e0       	ldi	r19, 0x00	; 0
 a80:	47 e8       	ldi	r20, 0x87	; 135
 a82:	53 e4       	ldi	r21, 0x43	; 67
 a84:	c7 01       	movw	r24, r14
 a86:	b6 01       	movw	r22, r12
 a88:	0e 94 1a 07 	call	0xe34	; 0xe34 <__gesf2>
 a8c:	88 23       	and	r24, r24
 a8e:	54 f0       	brlt	.+20     	; 0xaa4 <getColourCode+0x12a>
 a90:	20 e0       	ldi	r18, 0x00	; 0
 a92:	30 e8       	ldi	r19, 0x80	; 128
 a94:	4c ea       	ldi	r20, 0xAC	; 172
 a96:	53 e4       	ldi	r21, 0x43	; 67
 a98:	c7 01       	movw	r24, r14
 a9a:	b6 01       	movw	r22, r12
 a9c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__cmpsf2>
 aa0:	88 23       	and	r24, r24
 aa2:	7c f0       	brlt	.+30     	; 0xac2 <getColourCode+0x148>
 aa4:	0f c0       	rjmp	.+30     	; 0xac4 <getColourCode+0x14a>
    return 1;//colour defined
    }

uint8_t getColourCode(float hue){
	
	if ((hue>=345)||(hue<15)) return 0;//Code of red colour
 aa6:	80 e0       	ldi	r24, 0x00	; 0
 aa8:	0d c0       	rjmp	.+26     	; 0xac4 <getColourCode+0x14a>
 aaa:	80 e0       	ldi	r24, 0x00	; 0
 aac:	0b c0       	rjmp	.+22     	; 0xac4 <getColourCode+0x14a>
	else if ((hue>=15)&&(hue<30)) return 1;//Code of orange colour
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	09 c0       	rjmp	.+18     	; 0xac4 <getColourCode+0x14a>
	else if ((hue>=30)&&(hue<90)) return 2;//Code of yellow colour
 ab2:	82 e0       	ldi	r24, 0x02	; 2
 ab4:	07 c0       	rjmp	.+14     	; 0xac4 <getColourCode+0x14a>
	else if ((hue>=90)&&(hue<150)) return 3;//Code of green colour
 ab6:	83 e0       	ldi	r24, 0x03	; 3
 ab8:	05 c0       	rjmp	.+10     	; 0xac4 <getColourCode+0x14a>
	else if ((hue>=150)&&(hue<210)) return 4;//Code of light blue colour
 aba:	84 e0       	ldi	r24, 0x04	; 4
 abc:	03 c0       	rjmp	.+6      	; 0xac4 <getColourCode+0x14a>
	else if ((hue>=210)&&(hue<270)) return 5;//Code of blue colour
 abe:	85 e0       	ldi	r24, 0x05	; 5
 ac0:	01 c0       	rjmp	.+2      	; 0xac4 <getColourCode+0x14a>
	else if ((hue>=270)&&(hue<345)) return 6;//Code of pink colour
 ac2:	86 e0       	ldi	r24, 0x06	; 6
 ac4:	ff 90       	pop	r15
 ac6:	ef 90       	pop	r14
 ac8:	df 90       	pop	r13
 aca:	cf 90       	pop	r12
 acc:	08 95       	ret

00000ace <usartInit>:
{
	
	while (!(UCSR0A & (1<<RXC0)));
	return UDR0;
	
}
 ace:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 ad2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 ad6:	88 e1       	ldi	r24, 0x18	; 24
 ad8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 adc:	86 e0       	ldi	r24, 0x06	; 6
 ade:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 ae2:	08 95       	ret

00000ae4 <usartTransmit>:

void usartTransmit(uint8_t data){
	
	while (!(UCSR0A & (1<<UDRE0)));
 ae4:	e0 ec       	ldi	r30, 0xC0	; 192
 ae6:	f0 e0       	ldi	r31, 0x00	; 0
 ae8:	90 81       	ld	r25, Z
 aea:	95 ff       	sbrs	r25, 5
 aec:	fd cf       	rjmp	.-6      	; 0xae8 <usartTransmit+0x4>
	UDR0 = data;
 aee:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 af2:	08 95       	ret

00000af4 <usartTransmitTwoBytes>:
	
}

void usartTransmitTwoBytes(uint16_t data){
 af4:	cf 93       	push	r28
 af6:	c8 2f       	mov	r28, r24
	
	usartTransmit(data>>8);
 af8:	89 2f       	mov	r24, r25
 afa:	0e 94 72 05 	call	0xae4	; 0xae4 <usartTransmit>
	usartTransmit(data);
 afe:	8c 2f       	mov	r24, r28
 b00:	0e 94 72 05 	call	0xae4	; 0xae4 <usartTransmit>
	
}
 b04:	cf 91       	pop	r28
 b06:	08 95       	ret

00000b08 <__subsf3>:
 b08:	50 58       	subi	r21, 0x80	; 128

00000b0a <__addsf3>:
 b0a:	bb 27       	eor	r27, r27
 b0c:	aa 27       	eor	r26, r26
 b0e:	0e 94 9c 05 	call	0xb38	; 0xb38 <__addsf3x>
 b12:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_round>
 b16:	0e 94 d2 06 	call	0xda4	; 0xda4 <__fp_pscA>
 b1a:	38 f0       	brcs	.+14     	; 0xb2a <__addsf3+0x20>
 b1c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__fp_pscB>
 b20:	20 f0       	brcs	.+8      	; 0xb2a <__addsf3+0x20>
 b22:	39 f4       	brne	.+14     	; 0xb32 <__addsf3+0x28>
 b24:	9f 3f       	cpi	r25, 0xFF	; 255
 b26:	19 f4       	brne	.+6      	; 0xb2e <__addsf3+0x24>
 b28:	26 f4       	brtc	.+8      	; 0xb32 <__addsf3+0x28>
 b2a:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__fp_nan>
 b2e:	0e f4       	brtc	.+2      	; 0xb32 <__addsf3+0x28>
 b30:	e0 95       	com	r30
 b32:	e7 fb       	bst	r30, 7
 b34:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__fp_inf>

00000b38 <__addsf3x>:
 b38:	e9 2f       	mov	r30, r25
 b3a:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_split3>
 b3e:	58 f3       	brcs	.-42     	; 0xb16 <__addsf3+0xc>
 b40:	ba 17       	cp	r27, r26
 b42:	62 07       	cpc	r22, r18
 b44:	73 07       	cpc	r23, r19
 b46:	84 07       	cpc	r24, r20
 b48:	95 07       	cpc	r25, r21
 b4a:	20 f0       	brcs	.+8      	; 0xb54 <__addsf3x+0x1c>
 b4c:	79 f4       	brne	.+30     	; 0xb6c <__addsf3x+0x34>
 b4e:	a6 f5       	brtc	.+104    	; 0xbb8 <__addsf3x+0x80>
 b50:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__fp_zero>
 b54:	0e f4       	brtc	.+2      	; 0xb58 <__addsf3x+0x20>
 b56:	e0 95       	com	r30
 b58:	0b 2e       	mov	r0, r27
 b5a:	ba 2f       	mov	r27, r26
 b5c:	a0 2d       	mov	r26, r0
 b5e:	0b 01       	movw	r0, r22
 b60:	b9 01       	movw	r22, r18
 b62:	90 01       	movw	r18, r0
 b64:	0c 01       	movw	r0, r24
 b66:	ca 01       	movw	r24, r20
 b68:	a0 01       	movw	r20, r0
 b6a:	11 24       	eor	r1, r1
 b6c:	ff 27       	eor	r31, r31
 b6e:	59 1b       	sub	r21, r25
 b70:	99 f0       	breq	.+38     	; 0xb98 <__addsf3x+0x60>
 b72:	59 3f       	cpi	r21, 0xF9	; 249
 b74:	50 f4       	brcc	.+20     	; 0xb8a <__addsf3x+0x52>
 b76:	50 3e       	cpi	r21, 0xE0	; 224
 b78:	68 f1       	brcs	.+90     	; 0xbd4 <__addsf3x+0x9c>
 b7a:	1a 16       	cp	r1, r26
 b7c:	f0 40       	sbci	r31, 0x00	; 0
 b7e:	a2 2f       	mov	r26, r18
 b80:	23 2f       	mov	r18, r19
 b82:	34 2f       	mov	r19, r20
 b84:	44 27       	eor	r20, r20
 b86:	58 5f       	subi	r21, 0xF8	; 248
 b88:	f3 cf       	rjmp	.-26     	; 0xb70 <__addsf3x+0x38>
 b8a:	46 95       	lsr	r20
 b8c:	37 95       	ror	r19
 b8e:	27 95       	ror	r18
 b90:	a7 95       	ror	r26
 b92:	f0 40       	sbci	r31, 0x00	; 0
 b94:	53 95       	inc	r21
 b96:	c9 f7       	brne	.-14     	; 0xb8a <__addsf3x+0x52>
 b98:	7e f4       	brtc	.+30     	; 0xbb8 <__addsf3x+0x80>
 b9a:	1f 16       	cp	r1, r31
 b9c:	ba 0b       	sbc	r27, r26
 b9e:	62 0b       	sbc	r22, r18
 ba0:	73 0b       	sbc	r23, r19
 ba2:	84 0b       	sbc	r24, r20
 ba4:	ba f0       	brmi	.+46     	; 0xbd4 <__addsf3x+0x9c>
 ba6:	91 50       	subi	r25, 0x01	; 1
 ba8:	a1 f0       	breq	.+40     	; 0xbd2 <__addsf3x+0x9a>
 baa:	ff 0f       	add	r31, r31
 bac:	bb 1f       	adc	r27, r27
 bae:	66 1f       	adc	r22, r22
 bb0:	77 1f       	adc	r23, r23
 bb2:	88 1f       	adc	r24, r24
 bb4:	c2 f7       	brpl	.-16     	; 0xba6 <__addsf3x+0x6e>
 bb6:	0e c0       	rjmp	.+28     	; 0xbd4 <__addsf3x+0x9c>
 bb8:	ba 0f       	add	r27, r26
 bba:	62 1f       	adc	r22, r18
 bbc:	73 1f       	adc	r23, r19
 bbe:	84 1f       	adc	r24, r20
 bc0:	48 f4       	brcc	.+18     	; 0xbd4 <__addsf3x+0x9c>
 bc2:	87 95       	ror	r24
 bc4:	77 95       	ror	r23
 bc6:	67 95       	ror	r22
 bc8:	b7 95       	ror	r27
 bca:	f7 95       	ror	r31
 bcc:	9e 3f       	cpi	r25, 0xFE	; 254
 bce:	08 f0       	brcs	.+2      	; 0xbd2 <__addsf3x+0x9a>
 bd0:	b0 cf       	rjmp	.-160    	; 0xb32 <__addsf3+0x28>
 bd2:	93 95       	inc	r25
 bd4:	88 0f       	add	r24, r24
 bd6:	08 f0       	brcs	.+2      	; 0xbda <__addsf3x+0xa2>
 bd8:	99 27       	eor	r25, r25
 bda:	ee 0f       	add	r30, r30
 bdc:	97 95       	ror	r25
 bde:	87 95       	ror	r24
 be0:	08 95       	ret

00000be2 <__cmpsf2>:
 be2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__fp_cmp>
 be6:	08 f4       	brcc	.+2      	; 0xbea <__cmpsf2+0x8>
 be8:	81 e0       	ldi	r24, 0x01	; 1
 bea:	08 95       	ret

00000bec <__divsf3>:
 bec:	0e 94 0a 06 	call	0xc14	; 0xc14 <__divsf3x>
 bf0:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_round>
 bf4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__fp_pscB>
 bf8:	58 f0       	brcs	.+22     	; 0xc10 <__divsf3+0x24>
 bfa:	0e 94 d2 06 	call	0xda4	; 0xda4 <__fp_pscA>
 bfe:	40 f0       	brcs	.+16     	; 0xc10 <__divsf3+0x24>
 c00:	29 f4       	brne	.+10     	; 0xc0c <__divsf3+0x20>
 c02:	5f 3f       	cpi	r21, 0xFF	; 255
 c04:	29 f0       	breq	.+10     	; 0xc10 <__divsf3+0x24>
 c06:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__fp_inf>
 c0a:	51 11       	cpse	r21, r1
 c0c:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_szero>
 c10:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__fp_nan>

00000c14 <__divsf3x>:
 c14:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_split3>
 c18:	68 f3       	brcs	.-38     	; 0xbf4 <__divsf3+0x8>

00000c1a <__divsf3_pse>:
 c1a:	99 23       	and	r25, r25
 c1c:	b1 f3       	breq	.-20     	; 0xc0a <__divsf3+0x1e>
 c1e:	55 23       	and	r21, r21
 c20:	91 f3       	breq	.-28     	; 0xc06 <__divsf3+0x1a>
 c22:	95 1b       	sub	r25, r21
 c24:	55 0b       	sbc	r21, r21
 c26:	bb 27       	eor	r27, r27
 c28:	aa 27       	eor	r26, r26
 c2a:	62 17       	cp	r22, r18
 c2c:	73 07       	cpc	r23, r19
 c2e:	84 07       	cpc	r24, r20
 c30:	38 f0       	brcs	.+14     	; 0xc40 <__divsf3_pse+0x26>
 c32:	9f 5f       	subi	r25, 0xFF	; 255
 c34:	5f 4f       	sbci	r21, 0xFF	; 255
 c36:	22 0f       	add	r18, r18
 c38:	33 1f       	adc	r19, r19
 c3a:	44 1f       	adc	r20, r20
 c3c:	aa 1f       	adc	r26, r26
 c3e:	a9 f3       	breq	.-22     	; 0xc2a <__divsf3_pse+0x10>
 c40:	35 d0       	rcall	.+106    	; 0xcac <__divsf3_pse+0x92>
 c42:	0e 2e       	mov	r0, r30
 c44:	3a f0       	brmi	.+14     	; 0xc54 <__divsf3_pse+0x3a>
 c46:	e0 e8       	ldi	r30, 0x80	; 128
 c48:	32 d0       	rcall	.+100    	; 0xcae <__divsf3_pse+0x94>
 c4a:	91 50       	subi	r25, 0x01	; 1
 c4c:	50 40       	sbci	r21, 0x00	; 0
 c4e:	e6 95       	lsr	r30
 c50:	00 1c       	adc	r0, r0
 c52:	ca f7       	brpl	.-14     	; 0xc46 <__divsf3_pse+0x2c>
 c54:	2b d0       	rcall	.+86     	; 0xcac <__divsf3_pse+0x92>
 c56:	fe 2f       	mov	r31, r30
 c58:	29 d0       	rcall	.+82     	; 0xcac <__divsf3_pse+0x92>
 c5a:	66 0f       	add	r22, r22
 c5c:	77 1f       	adc	r23, r23
 c5e:	88 1f       	adc	r24, r24
 c60:	bb 1f       	adc	r27, r27
 c62:	26 17       	cp	r18, r22
 c64:	37 07       	cpc	r19, r23
 c66:	48 07       	cpc	r20, r24
 c68:	ab 07       	cpc	r26, r27
 c6a:	b0 e8       	ldi	r27, 0x80	; 128
 c6c:	09 f0       	breq	.+2      	; 0xc70 <__divsf3_pse+0x56>
 c6e:	bb 0b       	sbc	r27, r27
 c70:	80 2d       	mov	r24, r0
 c72:	bf 01       	movw	r22, r30
 c74:	ff 27       	eor	r31, r31
 c76:	93 58       	subi	r25, 0x83	; 131
 c78:	5f 4f       	sbci	r21, 0xFF	; 255
 c7a:	3a f0       	brmi	.+14     	; 0xc8a <__divsf3_pse+0x70>
 c7c:	9e 3f       	cpi	r25, 0xFE	; 254
 c7e:	51 05       	cpc	r21, r1
 c80:	78 f0       	brcs	.+30     	; 0xca0 <__divsf3_pse+0x86>
 c82:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__fp_inf>
 c86:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_szero>
 c8a:	5f 3f       	cpi	r21, 0xFF	; 255
 c8c:	e4 f3       	brlt	.-8      	; 0xc86 <__divsf3_pse+0x6c>
 c8e:	98 3e       	cpi	r25, 0xE8	; 232
 c90:	d4 f3       	brlt	.-12     	; 0xc86 <__divsf3_pse+0x6c>
 c92:	86 95       	lsr	r24
 c94:	77 95       	ror	r23
 c96:	67 95       	ror	r22
 c98:	b7 95       	ror	r27
 c9a:	f7 95       	ror	r31
 c9c:	9f 5f       	subi	r25, 0xFF	; 255
 c9e:	c9 f7       	brne	.-14     	; 0xc92 <__divsf3_pse+0x78>
 ca0:	88 0f       	add	r24, r24
 ca2:	91 1d       	adc	r25, r1
 ca4:	96 95       	lsr	r25
 ca6:	87 95       	ror	r24
 ca8:	97 f9       	bld	r25, 7
 caa:	08 95       	ret
 cac:	e1 e0       	ldi	r30, 0x01	; 1
 cae:	66 0f       	add	r22, r22
 cb0:	77 1f       	adc	r23, r23
 cb2:	88 1f       	adc	r24, r24
 cb4:	bb 1f       	adc	r27, r27
 cb6:	62 17       	cp	r22, r18
 cb8:	73 07       	cpc	r23, r19
 cba:	84 07       	cpc	r24, r20
 cbc:	ba 07       	cpc	r27, r26
 cbe:	20 f0       	brcs	.+8      	; 0xcc8 <__divsf3_pse+0xae>
 cc0:	62 1b       	sub	r22, r18
 cc2:	73 0b       	sbc	r23, r19
 cc4:	84 0b       	sbc	r24, r20
 cc6:	ba 0b       	sbc	r27, r26
 cc8:	ee 1f       	adc	r30, r30
 cca:	88 f7       	brcc	.-30     	; 0xcae <__divsf3_pse+0x94>
 ccc:	e0 95       	com	r30
 cce:	08 95       	ret

00000cd0 <__floatunsisf>:
 cd0:	e8 94       	clt
 cd2:	09 c0       	rjmp	.+18     	; 0xce6 <__floatsisf+0x12>

00000cd4 <__floatsisf>:
 cd4:	97 fb       	bst	r25, 7
 cd6:	3e f4       	brtc	.+14     	; 0xce6 <__floatsisf+0x12>
 cd8:	90 95       	com	r25
 cda:	80 95       	com	r24
 cdc:	70 95       	com	r23
 cde:	61 95       	neg	r22
 ce0:	7f 4f       	sbci	r23, 0xFF	; 255
 ce2:	8f 4f       	sbci	r24, 0xFF	; 255
 ce4:	9f 4f       	sbci	r25, 0xFF	; 255
 ce6:	99 23       	and	r25, r25
 ce8:	a9 f0       	breq	.+42     	; 0xd14 <__floatsisf+0x40>
 cea:	f9 2f       	mov	r31, r25
 cec:	96 e9       	ldi	r25, 0x96	; 150
 cee:	bb 27       	eor	r27, r27
 cf0:	93 95       	inc	r25
 cf2:	f6 95       	lsr	r31
 cf4:	87 95       	ror	r24
 cf6:	77 95       	ror	r23
 cf8:	67 95       	ror	r22
 cfa:	b7 95       	ror	r27
 cfc:	f1 11       	cpse	r31, r1
 cfe:	f8 cf       	rjmp	.-16     	; 0xcf0 <__floatsisf+0x1c>
 d00:	fa f4       	brpl	.+62     	; 0xd40 <__floatsisf+0x6c>
 d02:	bb 0f       	add	r27, r27
 d04:	11 f4       	brne	.+4      	; 0xd0a <__floatsisf+0x36>
 d06:	60 ff       	sbrs	r22, 0
 d08:	1b c0       	rjmp	.+54     	; 0xd40 <__floatsisf+0x6c>
 d0a:	6f 5f       	subi	r22, 0xFF	; 255
 d0c:	7f 4f       	sbci	r23, 0xFF	; 255
 d0e:	8f 4f       	sbci	r24, 0xFF	; 255
 d10:	9f 4f       	sbci	r25, 0xFF	; 255
 d12:	16 c0       	rjmp	.+44     	; 0xd40 <__floatsisf+0x6c>
 d14:	88 23       	and	r24, r24
 d16:	11 f0       	breq	.+4      	; 0xd1c <__floatsisf+0x48>
 d18:	96 e9       	ldi	r25, 0x96	; 150
 d1a:	11 c0       	rjmp	.+34     	; 0xd3e <__floatsisf+0x6a>
 d1c:	77 23       	and	r23, r23
 d1e:	21 f0       	breq	.+8      	; 0xd28 <__floatsisf+0x54>
 d20:	9e e8       	ldi	r25, 0x8E	; 142
 d22:	87 2f       	mov	r24, r23
 d24:	76 2f       	mov	r23, r22
 d26:	05 c0       	rjmp	.+10     	; 0xd32 <__floatsisf+0x5e>
 d28:	66 23       	and	r22, r22
 d2a:	71 f0       	breq	.+28     	; 0xd48 <__floatsisf+0x74>
 d2c:	96 e8       	ldi	r25, 0x86	; 134
 d2e:	86 2f       	mov	r24, r22
 d30:	70 e0       	ldi	r23, 0x00	; 0
 d32:	60 e0       	ldi	r22, 0x00	; 0
 d34:	2a f0       	brmi	.+10     	; 0xd40 <__floatsisf+0x6c>
 d36:	9a 95       	dec	r25
 d38:	66 0f       	add	r22, r22
 d3a:	77 1f       	adc	r23, r23
 d3c:	88 1f       	adc	r24, r24
 d3e:	da f7       	brpl	.-10     	; 0xd36 <__floatsisf+0x62>
 d40:	88 0f       	add	r24, r24
 d42:	96 95       	lsr	r25
 d44:	87 95       	ror	r24
 d46:	97 f9       	bld	r25, 7
 d48:	08 95       	ret

00000d4a <__fp_cmp>:
 d4a:	99 0f       	add	r25, r25
 d4c:	00 08       	sbc	r0, r0
 d4e:	55 0f       	add	r21, r21
 d50:	aa 0b       	sbc	r26, r26
 d52:	e0 e8       	ldi	r30, 0x80	; 128
 d54:	fe ef       	ldi	r31, 0xFE	; 254
 d56:	16 16       	cp	r1, r22
 d58:	17 06       	cpc	r1, r23
 d5a:	e8 07       	cpc	r30, r24
 d5c:	f9 07       	cpc	r31, r25
 d5e:	c0 f0       	brcs	.+48     	; 0xd90 <__fp_cmp+0x46>
 d60:	12 16       	cp	r1, r18
 d62:	13 06       	cpc	r1, r19
 d64:	e4 07       	cpc	r30, r20
 d66:	f5 07       	cpc	r31, r21
 d68:	98 f0       	brcs	.+38     	; 0xd90 <__fp_cmp+0x46>
 d6a:	62 1b       	sub	r22, r18
 d6c:	73 0b       	sbc	r23, r19
 d6e:	84 0b       	sbc	r24, r20
 d70:	95 0b       	sbc	r25, r21
 d72:	39 f4       	brne	.+14     	; 0xd82 <__fp_cmp+0x38>
 d74:	0a 26       	eor	r0, r26
 d76:	61 f0       	breq	.+24     	; 0xd90 <__fp_cmp+0x46>
 d78:	23 2b       	or	r18, r19
 d7a:	24 2b       	or	r18, r20
 d7c:	25 2b       	or	r18, r21
 d7e:	21 f4       	brne	.+8      	; 0xd88 <__fp_cmp+0x3e>
 d80:	08 95       	ret
 d82:	0a 26       	eor	r0, r26
 d84:	09 f4       	brne	.+2      	; 0xd88 <__fp_cmp+0x3e>
 d86:	a1 40       	sbci	r26, 0x01	; 1
 d88:	a6 95       	lsr	r26
 d8a:	8f ef       	ldi	r24, 0xFF	; 255
 d8c:	81 1d       	adc	r24, r1
 d8e:	81 1d       	adc	r24, r1
 d90:	08 95       	ret

00000d92 <__fp_inf>:
 d92:	97 f9       	bld	r25, 7
 d94:	9f 67       	ori	r25, 0x7F	; 127
 d96:	80 e8       	ldi	r24, 0x80	; 128
 d98:	70 e0       	ldi	r23, 0x00	; 0
 d9a:	60 e0       	ldi	r22, 0x00	; 0
 d9c:	08 95       	ret

00000d9e <__fp_nan>:
 d9e:	9f ef       	ldi	r25, 0xFF	; 255
 da0:	80 ec       	ldi	r24, 0xC0	; 192
 da2:	08 95       	ret

00000da4 <__fp_pscA>:
 da4:	00 24       	eor	r0, r0
 da6:	0a 94       	dec	r0
 da8:	16 16       	cp	r1, r22
 daa:	17 06       	cpc	r1, r23
 dac:	18 06       	cpc	r1, r24
 dae:	09 06       	cpc	r0, r25
 db0:	08 95       	ret

00000db2 <__fp_pscB>:
 db2:	00 24       	eor	r0, r0
 db4:	0a 94       	dec	r0
 db6:	12 16       	cp	r1, r18
 db8:	13 06       	cpc	r1, r19
 dba:	14 06       	cpc	r1, r20
 dbc:	05 06       	cpc	r0, r21
 dbe:	08 95       	ret

00000dc0 <__fp_round>:
 dc0:	09 2e       	mov	r0, r25
 dc2:	03 94       	inc	r0
 dc4:	00 0c       	add	r0, r0
 dc6:	11 f4       	brne	.+4      	; 0xdcc <__fp_round+0xc>
 dc8:	88 23       	and	r24, r24
 dca:	52 f0       	brmi	.+20     	; 0xde0 <__fp_round+0x20>
 dcc:	bb 0f       	add	r27, r27
 dce:	40 f4       	brcc	.+16     	; 0xde0 <__fp_round+0x20>
 dd0:	bf 2b       	or	r27, r31
 dd2:	11 f4       	brne	.+4      	; 0xdd8 <__fp_round+0x18>
 dd4:	60 ff       	sbrs	r22, 0
 dd6:	04 c0       	rjmp	.+8      	; 0xde0 <__fp_round+0x20>
 dd8:	6f 5f       	subi	r22, 0xFF	; 255
 dda:	7f 4f       	sbci	r23, 0xFF	; 255
 ddc:	8f 4f       	sbci	r24, 0xFF	; 255
 dde:	9f 4f       	sbci	r25, 0xFF	; 255
 de0:	08 95       	ret

00000de2 <__fp_split3>:
 de2:	57 fd       	sbrc	r21, 7
 de4:	90 58       	subi	r25, 0x80	; 128
 de6:	44 0f       	add	r20, r20
 de8:	55 1f       	adc	r21, r21
 dea:	59 f0       	breq	.+22     	; 0xe02 <__fp_splitA+0x10>
 dec:	5f 3f       	cpi	r21, 0xFF	; 255
 dee:	71 f0       	breq	.+28     	; 0xe0c <__fp_splitA+0x1a>
 df0:	47 95       	ror	r20

00000df2 <__fp_splitA>:
 df2:	88 0f       	add	r24, r24
 df4:	97 fb       	bst	r25, 7
 df6:	99 1f       	adc	r25, r25
 df8:	61 f0       	breq	.+24     	; 0xe12 <__fp_splitA+0x20>
 dfa:	9f 3f       	cpi	r25, 0xFF	; 255
 dfc:	79 f0       	breq	.+30     	; 0xe1c <__fp_splitA+0x2a>
 dfe:	87 95       	ror	r24
 e00:	08 95       	ret
 e02:	12 16       	cp	r1, r18
 e04:	13 06       	cpc	r1, r19
 e06:	14 06       	cpc	r1, r20
 e08:	55 1f       	adc	r21, r21
 e0a:	f2 cf       	rjmp	.-28     	; 0xdf0 <__fp_split3+0xe>
 e0c:	46 95       	lsr	r20
 e0e:	f1 df       	rcall	.-30     	; 0xdf2 <__fp_splitA>
 e10:	08 c0       	rjmp	.+16     	; 0xe22 <__fp_splitA+0x30>
 e12:	16 16       	cp	r1, r22
 e14:	17 06       	cpc	r1, r23
 e16:	18 06       	cpc	r1, r24
 e18:	99 1f       	adc	r25, r25
 e1a:	f1 cf       	rjmp	.-30     	; 0xdfe <__fp_splitA+0xc>
 e1c:	86 95       	lsr	r24
 e1e:	71 05       	cpc	r23, r1
 e20:	61 05       	cpc	r22, r1
 e22:	08 94       	sec
 e24:	08 95       	ret

00000e26 <__fp_zero>:
 e26:	e8 94       	clt

00000e28 <__fp_szero>:
 e28:	bb 27       	eor	r27, r27
 e2a:	66 27       	eor	r22, r22
 e2c:	77 27       	eor	r23, r23
 e2e:	cb 01       	movw	r24, r22
 e30:	97 f9       	bld	r25, 7
 e32:	08 95       	ret

00000e34 <__gesf2>:
 e34:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__fp_cmp>
 e38:	08 f4       	brcc	.+2      	; 0xe3c <__gesf2+0x8>
 e3a:	8f ef       	ldi	r24, 0xFF	; 255
 e3c:	08 95       	ret

00000e3e <__mulsf3>:
 e3e:	0e 94 32 07 	call	0xe64	; 0xe64 <__mulsf3x>
 e42:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__fp_round>
 e46:	0e 94 d2 06 	call	0xda4	; 0xda4 <__fp_pscA>
 e4a:	38 f0       	brcs	.+14     	; 0xe5a <__mulsf3+0x1c>
 e4c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__fp_pscB>
 e50:	20 f0       	brcs	.+8      	; 0xe5a <__mulsf3+0x1c>
 e52:	95 23       	and	r25, r21
 e54:	11 f0       	breq	.+4      	; 0xe5a <__mulsf3+0x1c>
 e56:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__fp_inf>
 e5a:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__fp_nan>
 e5e:	11 24       	eor	r1, r1
 e60:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_szero>

00000e64 <__mulsf3x>:
 e64:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_split3>
 e68:	70 f3       	brcs	.-36     	; 0xe46 <__mulsf3+0x8>

00000e6a <__mulsf3_pse>:
 e6a:	95 9f       	mul	r25, r21
 e6c:	c1 f3       	breq	.-16     	; 0xe5e <__mulsf3+0x20>
 e6e:	95 0f       	add	r25, r21
 e70:	50 e0       	ldi	r21, 0x00	; 0
 e72:	55 1f       	adc	r21, r21
 e74:	62 9f       	mul	r22, r18
 e76:	f0 01       	movw	r30, r0
 e78:	72 9f       	mul	r23, r18
 e7a:	bb 27       	eor	r27, r27
 e7c:	f0 0d       	add	r31, r0
 e7e:	b1 1d       	adc	r27, r1
 e80:	63 9f       	mul	r22, r19
 e82:	aa 27       	eor	r26, r26
 e84:	f0 0d       	add	r31, r0
 e86:	b1 1d       	adc	r27, r1
 e88:	aa 1f       	adc	r26, r26
 e8a:	64 9f       	mul	r22, r20
 e8c:	66 27       	eor	r22, r22
 e8e:	b0 0d       	add	r27, r0
 e90:	a1 1d       	adc	r26, r1
 e92:	66 1f       	adc	r22, r22
 e94:	82 9f       	mul	r24, r18
 e96:	22 27       	eor	r18, r18
 e98:	b0 0d       	add	r27, r0
 e9a:	a1 1d       	adc	r26, r1
 e9c:	62 1f       	adc	r22, r18
 e9e:	73 9f       	mul	r23, r19
 ea0:	b0 0d       	add	r27, r0
 ea2:	a1 1d       	adc	r26, r1
 ea4:	62 1f       	adc	r22, r18
 ea6:	83 9f       	mul	r24, r19
 ea8:	a0 0d       	add	r26, r0
 eaa:	61 1d       	adc	r22, r1
 eac:	22 1f       	adc	r18, r18
 eae:	74 9f       	mul	r23, r20
 eb0:	33 27       	eor	r19, r19
 eb2:	a0 0d       	add	r26, r0
 eb4:	61 1d       	adc	r22, r1
 eb6:	23 1f       	adc	r18, r19
 eb8:	84 9f       	mul	r24, r20
 eba:	60 0d       	add	r22, r0
 ebc:	21 1d       	adc	r18, r1
 ebe:	82 2f       	mov	r24, r18
 ec0:	76 2f       	mov	r23, r22
 ec2:	6a 2f       	mov	r22, r26
 ec4:	11 24       	eor	r1, r1
 ec6:	9f 57       	subi	r25, 0x7F	; 127
 ec8:	50 40       	sbci	r21, 0x00	; 0
 eca:	9a f0       	brmi	.+38     	; 0xef2 <__mulsf3_pse+0x88>
 ecc:	f1 f0       	breq	.+60     	; 0xf0a <__mulsf3_pse+0xa0>
 ece:	88 23       	and	r24, r24
 ed0:	4a f0       	brmi	.+18     	; 0xee4 <__mulsf3_pse+0x7a>
 ed2:	ee 0f       	add	r30, r30
 ed4:	ff 1f       	adc	r31, r31
 ed6:	bb 1f       	adc	r27, r27
 ed8:	66 1f       	adc	r22, r22
 eda:	77 1f       	adc	r23, r23
 edc:	88 1f       	adc	r24, r24
 ede:	91 50       	subi	r25, 0x01	; 1
 ee0:	50 40       	sbci	r21, 0x00	; 0
 ee2:	a9 f7       	brne	.-22     	; 0xece <__mulsf3_pse+0x64>
 ee4:	9e 3f       	cpi	r25, 0xFE	; 254
 ee6:	51 05       	cpc	r21, r1
 ee8:	80 f0       	brcs	.+32     	; 0xf0a <__mulsf3_pse+0xa0>
 eea:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__fp_inf>
 eee:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_szero>
 ef2:	5f 3f       	cpi	r21, 0xFF	; 255
 ef4:	e4 f3       	brlt	.-8      	; 0xeee <__mulsf3_pse+0x84>
 ef6:	98 3e       	cpi	r25, 0xE8	; 232
 ef8:	d4 f3       	brlt	.-12     	; 0xeee <__mulsf3_pse+0x84>
 efa:	86 95       	lsr	r24
 efc:	77 95       	ror	r23
 efe:	67 95       	ror	r22
 f00:	b7 95       	ror	r27
 f02:	f7 95       	ror	r31
 f04:	e7 95       	ror	r30
 f06:	9f 5f       	subi	r25, 0xFF	; 255
 f08:	c1 f7       	brne	.-16     	; 0xefa <__mulsf3_pse+0x90>
 f0a:	fe 2b       	or	r31, r30
 f0c:	88 0f       	add	r24, r24
 f0e:	91 1d       	adc	r25, r1
 f10:	96 95       	lsr	r25
 f12:	87 95       	ror	r24
 f14:	97 f9       	bld	r25, 7
 f16:	08 95       	ret

00000f18 <_exit>:
 f18:	f8 94       	cli

00000f1a <__stop_program>:
 f1a:	ff cf       	rjmp	.-2      	; 0xf1a <__stop_program>
